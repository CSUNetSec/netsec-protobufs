syntax = "proto3";

import "github.com/CSUNetSec/netsec-protobufs/common/common.proto";
import "github.com/CSUNetSec/netsec-protobufs/protocol/bgp/bgp.proto";

package bgpmon;

service Bgpmond {
	rpc CloseSession(CloseSessionRequest) returns (Empty) {}
	rpc ListModules(Empty) returns (ListModulesReply) {}
	rpc ListSessions(Empty) returns (ListSessionsReply) {}
	rpc RunModule(RunModuleRequest)returns (RunModuleReply) {}
	rpc StartModule(StartModuleRequest) returns (StartModuleReply) {}
	rpc StopModule(StopModuleRequest) returns (Empty) {}
	rpc OpenSession(OpenSessionRequest) returns (OpenSessionReply) {}
	rpc Write(stream WriteRequest) returns (Empty) {}
	rpc Get(GetRequest) returns (stream GetReply) {}
}

message Empty {
}

/*
 * Module Messages
 */
enum ModuleType {
	//maximal field value = 2

	GOBGP_LINK = 0;
	PREFIX_BY_AS_NUMBER = 1;
	PREFIX_HIJACK = 2;
}

message GoBGPLinkModule {
	//maximal field value = 2

	string address = 1;
	repeated string out_session_id = 2;
}

message PrefixByAsNumberModule {
	//maximal field value = 3

	int64 start_time = 1;
	int64 end_time = 2;
	repeated string in_session_id = 3;
}

message PrefixHijackModule {
	//maximal field value = 5

	int32 periodic_seconds = 1;
	int32 timeout_seconds = 2;
	repeated string in_session_id = 3;
	int64 start_time_seconds_from_epoch = 4;
	int64 lookback_duration_seconds = 5;
}

/*
 * Module Command Messages
 */
message ListModulesReply {
	//maximal field value = 1

	repeated string module_id = 1;
}

message RunModuleRequest {
	//maximal field value = 3

	ModuleType type = 1;
	PrefixByAsNumberModule prefix_by_as_number_module = 2;
	PrefixHijackModule prefix_hijack_module = 3;
}

message RunModuleReply {
	//maximal field value = 3

	string module_message = 3;
}

message StartModuleRequest {
	//maximal field value = 4

	ModuleType type = 1;
	string module_id = 2;
	GoBGPLinkModule gobgp_link_module = 3;
	PrefixHijackModule prefix_hijack_module = 4;
}

message StartModuleReply {
	//maximal field value = 3

	string module_id = 3;
}

message StopModuleRequest {
	//maximal field value = 1

	string module_id = 1;
}

/*
 * Session Messages
 */
enum SessionType {
	CASSANDRA = 0;
	FILE = 1;
	COCKROACH = 2;
	SQLITE = 3;
}

message CassandraSession {
	//maximal field value = 4

	string username = 1;
	string password = 2;
	repeated string hosts = 3;
	uint32 workerCount = 4;
}

message CockroachSession {
	//maximal field value = 6

	string username = 1;
	string password = 2;
	repeated string hosts = 3;
        uint32 port = 4;
	uint32 workerCount = 5;
	string certdir = 6;
}

message FileSession {
	//maximal field value = 1

	string filename = 1;
}


message SqliteSession {
	//maximal field value = 1

       string filename = 1;
}

/*
 * Session Command Messages 
 */
message CloseSessionRequest {
	//maximal field value = 1

	string session_id = 1;
}

message ListSessionsReply {
	//maximal field value = 1

	repeated string session_id = 1;
}

message OpenSessionRequest {
	//maximal field value = 6

	SessionType type = 1;
	string session_id = 2;
	CassandraSession cassandra_session = 3;
	FileSession file_session = 4;
	CockroachSession cockroach_session = 5;
	SqliteSession sqlite_session = 6;
}

message OpenSessionReply {
	//maximal field value = 1

	string session_id = 1;
}

/*
 * Write Messages
 */
message WriteRequest {
	//maximal field value = 8

	enum Type {
		AS_NUMBER_LOCATION = 0;
		IP_ADDRESS_LOCATION = 2;
		PREFIX_LOCATION = 3;
		BGP_CAPTURE = 4;
        	BGP_STATS = 5;
	}

	Type type = 1;
	string session_id = 2;
	ASNumberLocation as_number_location = 3;
	IPAddressLocation ip_address_location = 5;
	PrefixLocation prefix_location = 6;
	BGPCapture bgp_capture = 7;
    	BGPStats  bgp_stats = 8;
}

/*
 * Get Messages
 */
message GetRequest {
	//maximal field value = 4

	enum Type {
		BGP_CAPTURE = 0;
	}
	Type type = 1;
	string session_id = 2;
	string start_timestamp = 3;
	string end_timestamp = 4;
}

message GetReply {
	//maximal field value = 3

	enum Type {
		BGP_CAPTURE = 0;
	}
	Type type = 1;
	repeated BGPCapture captures = 2;
	string collection_id = 3;
}

message ASNumberLocation {
	//maximal field value = 4

	uint32 as_number = 1;
	string measure_date = 2;
	Location location = 3;
	string source = 4;
}

// a message of Capture type to facilitate the represtation of a
// BGP Update from multuple sources (live/mrt etc) to bgpmon 
// and other systems. the inner actual update is defined in protocol/bgp
message BGPCapture {
	//maximal field value = 8

	uint32 timestamp = 1;
	uint32 peer_as = 2;
	uint32 local_as = 3;
	uint32 interface_index = 4;
	uint32 address_family = 5;
	common.IPAddressWrapper peer_ip = 6;
	common.IPAddressWrapper local_ip = 7;
	bgp.BGPUpdate update = 8;
}


message IPAddressLocation {
	//maximal field value = 4

	string ip_address = 1;
	string measure_date = 2;
	Location location = 3;
	string source = 4;
}

message IPPrefix {
	//maximal field value = 2

	string prefix_ip_address = 1;
	uint32 prefix_mask = 2;
}

message Location {
	//maximal field value = 5

	string country_code = 1;
	string state_code = 2;
	string city = 3;
	double latitude = 4;
	double longitude = 5;
}

message Count {
	//maximal field value = 1

	map<string, uint32> count = 1;
}

message BGPStats {
	//maximal field value = 6

	string collector_ip = 1;
	uint64 timeStartSecEpoch = 2; //in seconds from epoch
	uint32 durationSec = 3;
	Count msgCounts = 4; //count type to number
	map<string,Count> destAsToPrefixCounts= 5;
	map<string,Count> destAsToASPCounts = 6;
}

message PrefixLocation {
	//maximal field value = 4

	IPPrefix prefix = 1;
	string measure_date = 2;
	Location location = 3;
	string source = 4;
}
