// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/CSUNetSec/netsec-protobufs/bgpmon/v2/bgpmon.proto

/*
Package bgpmonv2 is a generated protocol buffer package.

It is generated from these files:
	github.com/CSUNetSec/netsec-protobufs/bgpmon/v2/bgpmon.proto

It has these top-level messages:
	Empty
	RunModuleRequest
	RunModuleReply
	CloseModuleRequest
	ModuleInfo
	ListAvailableModulesReply
	OpenModuleInfo
	ListOpenModulesReply
	SessionType
	SessionInfoRequest
	SessionInfoReply
	ListAvailableSessionsReply
	CloseSessionRequest
	ListOpenSessionsReply
	OpenSessionRequest
	OpenSessionReply
	WriteRequest
	WriteReply
	GetRequest
	Filter
	GetReply
	BGPCapture
*/
package bgpmonv2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/CSUNetSec/netsec-protobufs/common"
import bgp "github.com/CSUNetSec/netsec-protobufs/protocol/bgp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WriteRequest_Type int32

const (
	WriteRequest_BGP_CAPTURE WriteRequest_Type = 0
)

var WriteRequest_Type_name = map[int32]string{
	0: "BGP_CAPTURE",
}
var WriteRequest_Type_value = map[string]int32{
	"BGP_CAPTURE": 0,
}

func (x WriteRequest_Type) String() string {
	return proto.EnumName(WriteRequest_Type_name, int32(x))
}
func (WriteRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

type GetRequest_Type int32

const (
	GetRequest_CAPTURE GetRequest_Type = 0
	GetRequest_PREFIX  GetRequest_Type = 1
	GetRequest_ASPATH  GetRequest_Type = 2
)

var GetRequest_Type_name = map[int32]string{
	0: "CAPTURE",
	1: "PREFIX",
	2: "ASPATH",
}
var GetRequest_Type_value = map[string]int32{
	"CAPTURE": 0,
	"PREFIX":  1,
	"ASPATH":  2,
}

func (x GetRequest_Type) String() string {
	return proto.EnumName(GetRequest_Type_name, int32(x))
}
func (GetRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 0} }

// maximal field value = 4
type Filter_FilterType int32

const (
	Filter_ORIGIN_AS      Filter_FilterType = 0
	Filter_PREFIXEXACT    Filter_FilterType = 1
	Filter_PREFIXINCLUDED Filter_FilterType = 2
)

var Filter_FilterType_name = map[int32]string{
	0: "ORIGIN_AS",
	1: "PREFIXEXACT",
	2: "PREFIXINCLUDED",
}
var Filter_FilterType_value = map[string]int32{
	"ORIGIN_AS":      0,
	"PREFIXEXACT":    1,
	"PREFIXINCLUDED": 2,
}

func (x Filter_FilterType) String() string {
	return proto.EnumName(Filter_FilterType_name, int32(x))
}
func (Filter_FilterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RunModuleRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Args string `protobuf:"bytes,3,opt,name=args" json:"args,omitempty"`
}

func (m *RunModuleRequest) Reset()                    { *m = RunModuleRequest{} }
func (m *RunModuleRequest) String() string            { return proto.CompactTextString(m) }
func (*RunModuleRequest) ProtoMessage()               {}
func (*RunModuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RunModuleRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RunModuleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RunModuleRequest) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

type RunModuleReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RunModuleReply) Reset()                    { *m = RunModuleReply{} }
func (m *RunModuleReply) String() string            { return proto.CompactTextString(m) }
func (*RunModuleReply) ProtoMessage()               {}
func (*RunModuleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RunModuleReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CloseModuleRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CloseModuleRequest) Reset()                    { *m = CloseModuleRequest{} }
func (m *CloseModuleRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseModuleRequest) ProtoMessage()               {}
func (*CloseModuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CloseModuleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ModuleInfo struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	Opts string `protobuf:"bytes,3,opt,name=opts" json:"opts,omitempty"`
}

func (m *ModuleInfo) Reset()                    { *m = ModuleInfo{} }
func (m *ModuleInfo) String() string            { return proto.CompactTextString(m) }
func (*ModuleInfo) ProtoMessage()               {}
func (*ModuleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ModuleInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ModuleInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ModuleInfo) GetOpts() string {
	if m != nil {
		return m.Opts
	}
	return ""
}

type ListAvailableModulesReply struct {
	AvailableModules []*ModuleInfo `protobuf:"bytes,1,rep,name=available_modules,json=availableModules" json:"available_modules,omitempty"`
}

func (m *ListAvailableModulesReply) Reset()                    { *m = ListAvailableModulesReply{} }
func (m *ListAvailableModulesReply) String() string            { return proto.CompactTextString(m) }
func (*ListAvailableModulesReply) ProtoMessage()               {}
func (*ListAvailableModulesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListAvailableModulesReply) GetAvailableModules() []*ModuleInfo {
	if m != nil {
		return m.AvailableModules
	}
	return nil
}

type OpenModuleInfo struct {
	Type   string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *OpenModuleInfo) Reset()                    { *m = OpenModuleInfo{} }
func (m *OpenModuleInfo) String() string            { return proto.CompactTextString(m) }
func (*OpenModuleInfo) ProtoMessage()               {}
func (*OpenModuleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OpenModuleInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OpenModuleInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OpenModuleInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ListOpenModulesReply struct {
	OpenModules []*OpenModuleInfo `protobuf:"bytes,1,rep,name=open_modules,json=openModules" json:"open_modules,omitempty"`
}

func (m *ListOpenModulesReply) Reset()                    { *m = ListOpenModulesReply{} }
func (m *ListOpenModulesReply) String() string            { return proto.CompactTextString(m) }
func (*ListOpenModulesReply) ProtoMessage()               {}
func (*ListOpenModulesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListOpenModulesReply) GetOpenModules() []*OpenModuleInfo {
	if m != nil {
		return m.OpenModules
	}
	return nil
}

type SessionType struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
}

func (m *SessionType) Reset()                    { *m = SessionType{} }
func (m *SessionType) String() string            { return proto.CompactTextString(m) }
func (*SessionType) ProtoMessage()               {}
func (*SessionType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SessionType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SessionType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SessionType) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type SessionInfoRequest struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *SessionInfoRequest) Reset()                    { *m = SessionInfoRequest{} }
func (m *SessionInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionInfoRequest) ProtoMessage()               {}
func (*SessionInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SessionInfoRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type SessionInfoReply struct {
	Type      *SessionType `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	SessionId string       `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Workers   uint32       `protobuf:"varint,3,opt,name=workers" json:"workers,omitempty"`
}

func (m *SessionInfoReply) Reset()                    { *m = SessionInfoReply{} }
func (m *SessionInfoReply) String() string            { return proto.CompactTextString(m) }
func (*SessionInfoReply) ProtoMessage()               {}
func (*SessionInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SessionInfoReply) GetType() *SessionType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SessionInfoReply) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionInfoReply) GetWorkers() uint32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

type ListAvailableSessionsReply struct {
	AvailableSessions []*SessionType `protobuf:"bytes,1,rep,name=available_sessions,json=availableSessions" json:"available_sessions,omitempty"`
}

func (m *ListAvailableSessionsReply) Reset()                    { *m = ListAvailableSessionsReply{} }
func (m *ListAvailableSessionsReply) String() string            { return proto.CompactTextString(m) }
func (*ListAvailableSessionsReply) ProtoMessage()               {}
func (*ListAvailableSessionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListAvailableSessionsReply) GetAvailableSessions() []*SessionType {
	if m != nil {
		return m.AvailableSessions
	}
	return nil
}

//
// Session Command Messages
type CloseSessionRequest struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *CloseSessionRequest) Reset()                    { *m = CloseSessionRequest{} }
func (m *CloseSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionRequest) ProtoMessage()               {}
func (*CloseSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CloseSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type ListOpenSessionsReply struct {
	SessionId []string `protobuf:"bytes,1,rep,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *ListOpenSessionsReply) Reset()                    { *m = ListOpenSessionsReply{} }
func (m *ListOpenSessionsReply) String() string            { return proto.CompactTextString(m) }
func (*ListOpenSessionsReply) ProtoMessage()               {}
func (*ListOpenSessionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListOpenSessionsReply) GetSessionId() []string {
	if m != nil {
		return m.SessionId
	}
	return nil
}

type OpenSessionRequest struct {
	SessionName string `protobuf:"bytes,1,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
	SessionId   string `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Workers     uint32 `protobuf:"varint,3,opt,name=workers" json:"workers,omitempty"`
}

func (m *OpenSessionRequest) Reset()                    { *m = OpenSessionRequest{} }
func (m *OpenSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionRequest) ProtoMessage()               {}
func (*OpenSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *OpenSessionRequest) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

func (m *OpenSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *OpenSessionRequest) GetWorkers() uint32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

type OpenSessionReply struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *OpenSessionReply) Reset()                    { *m = OpenSessionReply{} }
func (m *OpenSessionReply) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionReply) ProtoMessage()               {}
func (*OpenSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *OpenSessionReply) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

//
// Write Messages
type WriteRequest struct {
	Type       WriteRequest_Type `protobuf:"varint,1,opt,name=type,enum=bgpmonv2.WriteRequest_Type" json:"type,omitempty"`
	SessionId  string            `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	BgpCapture *BGPCapture       `protobuf:"bytes,3,opt,name=bgp_capture,json=bgpCapture" json:"bgp_capture,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *WriteRequest) GetType() WriteRequest_Type {
	if m != nil {
		return m.Type
	}
	return WriteRequest_BGP_CAPTURE
}

func (m *WriteRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *WriteRequest) GetBgpCapture() *BGPCapture {
	if m != nil {
		return m.BgpCapture
	}
	return nil
}

type WriteReply struct {
	TotalMessages uint64 `protobuf:"varint,1,opt,name=totalMessages" json:"totalMessages,omitempty"`
	StartTime     uint64 `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	EndTime       uint64 `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`
	NumWorkers    uint32 `protobuf:"varint,4,opt,name=numWorkers" json:"numWorkers,omitempty"`
	Error         string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *WriteReply) Reset()                    { *m = WriteReply{} }
func (m *WriteReply) String() string            { return proto.CompactTextString(m) }
func (*WriteReply) ProtoMessage()               {}
func (*WriteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *WriteReply) GetTotalMessages() uint64 {
	if m != nil {
		return m.TotalMessages
	}
	return 0
}

func (m *WriteReply) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *WriteReply) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *WriteReply) GetNumWorkers() uint32 {
	if m != nil {
		return m.NumWorkers
	}
	return 0
}

func (m *WriteReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

//
// Get Messages
type GetRequest struct {
	Type           GetRequest_Type `protobuf:"varint,1,opt,name=type,enum=bgpmonv2.GetRequest_Type" json:"type,omitempty"`
	SessionId      string          `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Filters        []*Filter       `protobuf:"bytes,3,rep,name=filters" json:"filters,omitempty"`
	CollectorName  string          `protobuf:"bytes,4,opt,name=collector_name,json=collectorName" json:"collector_name,omitempty"`
	StartTimestamp uint64          `protobuf:"varint,5,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   uint64          `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetRequest) GetType() GetRequest_Type {
	if m != nil {
		return m.Type
	}
	return GetRequest_CAPTURE
}

func (m *GetRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *GetRequest) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *GetRequest) GetCollectorName() string {
	if m != nil {
		return m.CollectorName
	}
	return ""
}

func (m *GetRequest) GetStartTimestamp() uint64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *GetRequest) GetEndTimestamp() uint64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

type Filter struct {
	Type             Filter_FilterType `protobuf:"varint,1,opt,name=type,enum=bgpmonv2.Filter_FilterType" json:"type,omitempty"`
	OriginAs         uint32            `protobuf:"varint,2,opt,name=origin_as,json=originAs" json:"origin_as,omitempty"`
	AdvertizedPrefix string            `protobuf:"bytes,3,opt,name=advertized_prefix,json=advertizedPrefix" json:"advertized_prefix,omitempty"`
	WithdrawnPrefix  string            `protobuf:"bytes,4,opt,name=withdrawn_prefix,json=withdrawnPrefix" json:"withdrawn_prefix,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Filter) GetType() Filter_FilterType {
	if m != nil {
		return m.Type
	}
	return Filter_ORIGIN_AS
}

func (m *Filter) GetOriginAs() uint32 {
	if m != nil {
		return m.OriginAs
	}
	return 0
}

func (m *Filter) GetAdvertizedPrefix() string {
	if m != nil {
		return m.AdvertizedPrefix
	}
	return ""
}

func (m *Filter) GetWithdrawnPrefix() string {
	if m != nil {
		return m.WithdrawnPrefix
	}
	return ""
}

// GetReply carries chunks of a PBStream byte array.
// If it is incomplete then the client should read all
// the following messages until the incomplete flag is not set
// and then try to unmarshal the message. Also the Type once an
// incomplete stream starts has to remain the same accros all subsequent
// messages
type GetReply struct {
	// maximal field value = 4
	Type       GetRequest_Type `protobuf:"varint,1,opt,name=type,enum=bgpmonv2.GetRequest_Type" json:"type,omitempty"`
	Error      string          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Incomplete bool            `protobuf:"varint,3,opt,name=incomplete" json:"incomplete,omitempty"`
	Chunk      [][]byte        `protobuf:"bytes,4,rep,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetReply) GetType() GetRequest_Type {
	if m != nil {
		return m.Type
	}
	return GetRequest_CAPTURE
}

func (m *GetReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetReply) GetIncomplete() bool {
	if m != nil {
		return m.Incomplete
	}
	return false
}

func (m *GetReply) GetChunk() [][]byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

// a message of Capture type to facilitate the represtation of a
// BGP Update from multuple sources (live/mrt etc) to bgpmon
// and other systems. the inner actual update is defined in protocol/bgp
type BGPCapture struct {
	Timestamp      uint32                   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	PeerAs         uint32                   `protobuf:"varint,2,opt,name=peer_as,json=peerAs" json:"peer_as,omitempty"`
	LocalAs        uint32                   `protobuf:"varint,3,opt,name=local_as,json=localAs" json:"local_as,omitempty"`
	InterfaceIndex uint32                   `protobuf:"varint,4,opt,name=interface_index,json=interfaceIndex" json:"interface_index,omitempty"`
	AddressFamily  uint32                   `protobuf:"varint,5,opt,name=address_family,json=addressFamily" json:"address_family,omitempty"`
	PeerIp         *common.IPAddressWrapper `protobuf:"bytes,6,opt,name=peer_ip,json=peerIp" json:"peer_ip,omitempty"`
	LocalIp        *common.IPAddressWrapper `protobuf:"bytes,7,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	Update         *bgp.BGPUpdate           `protobuf:"bytes,8,opt,name=update" json:"update,omitempty"`
}

func (m *BGPCapture) Reset()                    { *m = BGPCapture{} }
func (m *BGPCapture) String() string            { return proto.CompactTextString(m) }
func (*BGPCapture) ProtoMessage()               {}
func (*BGPCapture) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BGPCapture) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BGPCapture) GetPeerAs() uint32 {
	if m != nil {
		return m.PeerAs
	}
	return 0
}

func (m *BGPCapture) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BGPCapture) GetInterfaceIndex() uint32 {
	if m != nil {
		return m.InterfaceIndex
	}
	return 0
}

func (m *BGPCapture) GetAddressFamily() uint32 {
	if m != nil {
		return m.AddressFamily
	}
	return 0
}

func (m *BGPCapture) GetPeerIp() *common.IPAddressWrapper {
	if m != nil {
		return m.PeerIp
	}
	return nil
}

func (m *BGPCapture) GetLocalIp() *common.IPAddressWrapper {
	if m != nil {
		return m.LocalIp
	}
	return nil
}

func (m *BGPCapture) GetUpdate() *bgp.BGPUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "bgpmonv2.Empty")
	proto.RegisterType((*RunModuleRequest)(nil), "bgpmonv2.RunModuleRequest")
	proto.RegisterType((*RunModuleReply)(nil), "bgpmonv2.RunModuleReply")
	proto.RegisterType((*CloseModuleRequest)(nil), "bgpmonv2.CloseModuleRequest")
	proto.RegisterType((*ModuleInfo)(nil), "bgpmonv2.ModuleInfo")
	proto.RegisterType((*ListAvailableModulesReply)(nil), "bgpmonv2.ListAvailableModulesReply")
	proto.RegisterType((*OpenModuleInfo)(nil), "bgpmonv2.OpenModuleInfo")
	proto.RegisterType((*ListOpenModulesReply)(nil), "bgpmonv2.ListOpenModulesReply")
	proto.RegisterType((*SessionType)(nil), "bgpmonv2.SessionType")
	proto.RegisterType((*SessionInfoRequest)(nil), "bgpmonv2.SessionInfoRequest")
	proto.RegisterType((*SessionInfoReply)(nil), "bgpmonv2.SessionInfoReply")
	proto.RegisterType((*ListAvailableSessionsReply)(nil), "bgpmonv2.ListAvailableSessionsReply")
	proto.RegisterType((*CloseSessionRequest)(nil), "bgpmonv2.CloseSessionRequest")
	proto.RegisterType((*ListOpenSessionsReply)(nil), "bgpmonv2.ListOpenSessionsReply")
	proto.RegisterType((*OpenSessionRequest)(nil), "bgpmonv2.OpenSessionRequest")
	proto.RegisterType((*OpenSessionReply)(nil), "bgpmonv2.OpenSessionReply")
	proto.RegisterType((*WriteRequest)(nil), "bgpmonv2.WriteRequest")
	proto.RegisterType((*WriteReply)(nil), "bgpmonv2.WriteReply")
	proto.RegisterType((*GetRequest)(nil), "bgpmonv2.GetRequest")
	proto.RegisterType((*Filter)(nil), "bgpmonv2.Filter")
	proto.RegisterType((*GetReply)(nil), "bgpmonv2.GetReply")
	proto.RegisterType((*BGPCapture)(nil), "bgpmonv2.BGPCapture")
	proto.RegisterEnum("bgpmonv2.WriteRequest_Type", WriteRequest_Type_name, WriteRequest_Type_value)
	proto.RegisterEnum("bgpmonv2.GetRequest_Type", GetRequest_Type_name, GetRequest_Type_value)
	proto.RegisterEnum("bgpmonv2.Filter_FilterType", Filter_FilterType_name, Filter_FilterType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bgpmond service

type BgpmondClient interface {
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	ListOpenSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOpenSessionsReply, error)
	ListAvailableSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAvailableSessionsReply, error)
	OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Bgpmond_WriteClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Bgpmond_GetClient, error)
	GetSessionInfo(ctx context.Context, in *SessionInfoRequest, opts ...grpc.CallOption) (*SessionInfoReply, error)
	RunModule(ctx context.Context, in *RunModuleRequest, opts ...grpc.CallOption) (*RunModuleReply, error)
	CloseModule(ctx context.Context, in *CloseModuleRequest, opts ...grpc.CallOption) (*Empty, error)
	ListAvailableModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAvailableModulesReply, error)
	ListOpenModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOpenModulesReply, error)
}

type bgpmondClient struct {
	cc *grpc.ClientConn
}

func NewBgpmondClient(cc *grpc.ClientConn) BgpmondClient {
	return &bgpmondClient{cc}
}

func (c *bgpmondClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/CloseSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListOpenSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOpenSessionsReply, error) {
	out := new(ListOpenSessionsReply)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/ListOpenSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListAvailableSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAvailableSessionsReply, error) {
	out := new(ListAvailableSessionsReply)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/ListAvailableSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error) {
	out := new(OpenSessionReply)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/OpenSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) Write(ctx context.Context, opts ...grpc.CallOption) (Bgpmond_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bgpmond_serviceDesc.Streams[0], c.cc, "/bgpmonv2.Bgpmond/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpmondWriteClient{stream}
	return x, nil
}

type Bgpmond_WriteClient interface {
	Send(*WriteRequest) error
	CloseAndRecv() (*WriteReply, error)
	grpc.ClientStream
}

type bgpmondWriteClient struct {
	grpc.ClientStream
}

func (x *bgpmondWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bgpmondWriteClient) CloseAndRecv() (*WriteReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpmondClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Bgpmond_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bgpmond_serviceDesc.Streams[1], c.cc, "/bgpmonv2.Bgpmond/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpmondGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bgpmond_GetClient interface {
	Recv() (*GetReply, error)
	grpc.ClientStream
}

type bgpmondGetClient struct {
	grpc.ClientStream
}

func (x *bgpmondGetClient) Recv() (*GetReply, error) {
	m := new(GetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpmondClient) GetSessionInfo(ctx context.Context, in *SessionInfoRequest, opts ...grpc.CallOption) (*SessionInfoReply, error) {
	out := new(SessionInfoReply)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/GetSessionInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) RunModule(ctx context.Context, in *RunModuleRequest, opts ...grpc.CallOption) (*RunModuleReply, error) {
	out := new(RunModuleReply)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/RunModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) CloseModule(ctx context.Context, in *CloseModuleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/CloseModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListAvailableModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAvailableModulesReply, error) {
	out := new(ListAvailableModulesReply)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/ListAvailableModules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListOpenModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOpenModulesReply, error) {
	out := new(ListOpenModulesReply)
	err := grpc.Invoke(ctx, "/bgpmonv2.Bgpmond/ListOpenModules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bgpmond service

type BgpmondServer interface {
	CloseSession(context.Context, *CloseSessionRequest) (*Empty, error)
	ListOpenSessions(context.Context, *Empty) (*ListOpenSessionsReply, error)
	ListAvailableSessions(context.Context, *Empty) (*ListAvailableSessionsReply, error)
	OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionReply, error)
	Write(Bgpmond_WriteServer) error
	Get(*GetRequest, Bgpmond_GetServer) error
	GetSessionInfo(context.Context, *SessionInfoRequest) (*SessionInfoReply, error)
	RunModule(context.Context, *RunModuleRequest) (*RunModuleReply, error)
	CloseModule(context.Context, *CloseModuleRequest) (*Empty, error)
	ListAvailableModules(context.Context, *Empty) (*ListAvailableModulesReply, error)
	ListOpenModules(context.Context, *Empty) (*ListOpenModulesReply, error)
}

func RegisterBgpmondServer(s *grpc.Server, srv BgpmondServer) {
	s.RegisterService(&_Bgpmond_serviceDesc, srv)
}

func _Bgpmond_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListOpenSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListOpenSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/ListOpenSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListOpenSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListAvailableSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListAvailableSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/ListAvailableSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListAvailableSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).OpenSession(ctx, req.(*OpenSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BgpmondServer).Write(&bgpmondWriteServer{stream})
}

type Bgpmond_WriteServer interface {
	SendAndClose(*WriteReply) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type bgpmondWriteServer struct {
	grpc.ServerStream
}

func (x *bgpmondWriteServer) SendAndClose(m *WriteReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bgpmondWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bgpmond_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpmondServer).Get(m, &bgpmondGetServer{stream})
}

type Bgpmond_GetServer interface {
	Send(*GetReply) error
	grpc.ServerStream
}

type bgpmondGetServer struct {
	grpc.ServerStream
}

func (x *bgpmondGetServer) Send(m *GetReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Bgpmond_GetSessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).GetSessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/GetSessionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).GetSessionInfo(ctx, req.(*SessionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_RunModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).RunModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/RunModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).RunModule(ctx, req.(*RunModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_CloseModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).CloseModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/CloseModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).CloseModule(ctx, req.(*CloseModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListAvailableModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListAvailableModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/ListAvailableModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListAvailableModules(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListOpenModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListOpenModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/ListOpenModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListOpenModules(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bgpmond_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bgpmonv2.Bgpmond",
	HandlerType: (*BgpmondServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseSession",
			Handler:    _Bgpmond_CloseSession_Handler,
		},
		{
			MethodName: "ListOpenSessions",
			Handler:    _Bgpmond_ListOpenSessions_Handler,
		},
		{
			MethodName: "ListAvailableSessions",
			Handler:    _Bgpmond_ListAvailableSessions_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _Bgpmond_OpenSession_Handler,
		},
		{
			MethodName: "GetSessionInfo",
			Handler:    _Bgpmond_GetSessionInfo_Handler,
		},
		{
			MethodName: "RunModule",
			Handler:    _Bgpmond_RunModule_Handler,
		},
		{
			MethodName: "CloseModule",
			Handler:    _Bgpmond_CloseModule_Handler,
		},
		{
			MethodName: "ListAvailableModules",
			Handler:    _Bgpmond_ListAvailableModules_Handler,
		},
		{
			MethodName: "ListOpenModules",
			Handler:    _Bgpmond_ListOpenModules_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Bgpmond_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Bgpmond_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/CSUNetSec/netsec-protobufs/bgpmon/v2/bgpmon.proto",
}

func init() {
	proto.RegisterFile("github.com/CSUNetSec/netsec-protobufs/bgpmon/v2/bgpmon.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x16, 0x25, 0x59, 0xb2, 0x47, 0x07, 0x33, 0xfb, 0x3b, 0x89, 0xa2, 0x1c, 0x7e, 0x77, 0x93,
	0xb6, 0x4e, 0x83, 0xd8, 0x8d, 0xdc, 0x16, 0x08, 0x5a, 0x14, 0x51, 0x64, 0x5b, 0x61, 0xe1, 0x38,
	0x02, 0x65, 0x23, 0xb9, 0xaa, 0x40, 0x91, 0x2b, 0x85, 0x08, 0x4f, 0x25, 0x57, 0x4e, 0xdc, 0xfb,
	0x5e, 0xf4, 0x2d, 0x7a, 0xd9, 0xab, 0x3e, 0x42, 0x9f, 0xa9, 0x8f, 0x50, 0xec, 0x81, 0x47, 0xc9,
	0x88, 0xd3, 0x0b, 0x43, 0xbb, 0xdf, 0xcc, 0xce, 0x7e, 0xfb, 0xcd, 0x2c, 0x77, 0x0c, 0x3f, 0xcc,
	0x6d, 0xfa, 0x76, 0x31, 0xdd, 0x35, 0x7d, 0x77, 0x6f, 0x30, 0x3e, 0x3b, 0x21, 0x74, 0x4c, 0xcc,
	0x3d, 0x8f, 0xd0, 0x88, 0x98, 0x8f, 0x83, 0xd0, 0xa7, 0xfe, 0x74, 0x31, 0x8b, 0xf6, 0xa6, 0xf3,
	0xc0, 0xf5, 0xbd, 0xbd, 0xf3, 0x9e, 0x1c, 0xed, 0x72, 0x13, 0x5a, 0x17, 0xb3, 0xf3, 0x5e, 0xf7,
	0xe9, 0xd5, 0xe2, 0x98, 0xbe, 0xcb, 0xe2, 0x88, 0x1f, 0x11, 0xa4, 0x7b, 0x45, 0x0a, 0x7c, 0x64,
	0xfa, 0x0e, 0x63, 0xc0, 0xfe, 0xc4, 0x6a, 0x5c, 0x87, 0xb5, 0x43, 0x37, 0xa0, 0x17, 0xf8, 0x27,
	0x50, 0xf5, 0x85, 0xf7, 0xd2, 0xb7, 0x16, 0x0e, 0xd1, 0xc9, 0x2f, 0x0b, 0x12, 0x51, 0x84, 0xa0,
	0x4a, 0x2f, 0x02, 0xd2, 0x51, 0xb6, 0x95, 0x9d, 0x0d, 0x9d, 0x8f, 0x51, 0x1b, 0xca, 0xb6, 0xd5,
	0x29, 0x73, 0xa4, 0x6c, 0x5b, 0xcc, 0xc7, 0x08, 0xe7, 0x51, 0xa7, 0x22, 0x7c, 0xd8, 0x18, 0x6f,
	0x43, 0x3b, 0x13, 0x2b, 0x70, 0x2e, 0xe4, 0x2a, 0x25, 0x5e, 0x85, 0x1f, 0x00, 0x1a, 0x38, 0x7e,
	0x44, 0xf2, 0xfb, 0x15, 0xbd, 0x5e, 0x00, 0x08, 0x07, 0xcd, 0x9b, 0xf9, 0x2b, 0xd9, 0x20, 0xa8,
	0x5a, 0x24, 0x32, 0x25, 0x1f, 0x3e, 0x66, 0x98, 0x1f, 0xd0, 0x84, 0x11, 0x1b, 0xe3, 0x9f, 0xe1,
	0xd6, 0xb1, 0x1d, 0xd1, 0xfe, 0xb9, 0x61, 0x3b, 0xc6, 0xd4, 0x91, 0xfb, 0x46, 0x82, 0x5c, 0x1f,
	0xae, 0x19, 0xb1, 0x61, 0xe2, 0x0a, 0x4b, 0x47, 0xd9, 0xae, 0xec, 0x34, 0x7a, 0x5b, 0xbb, 0x71,
	0x8a, 0x76, 0x53, 0x26, 0xba, 0x6a, 0x14, 0xe2, 0xe0, 0x63, 0x68, 0xbf, 0x0a, 0x88, 0xf7, 0x11,
	0xb6, 0x45, 0xed, 0x6e, 0x40, 0x2d, 0xa2, 0x06, 0x5d, 0xc4, 0x5c, 0xe5, 0x0c, 0x8f, 0x61, 0x8b,
	0xb1, 0x4d, 0x23, 0x4a, 0xa2, 0xdf, 0x43, 0xd3, 0x0f, 0x88, 0x57, 0xe0, 0xd8, 0x49, 0x39, 0xe6,
	0x39, 0xe8, 0x0d, 0x3f, 0x8d, 0x80, 0x35, 0x68, 0x8c, 0x49, 0x14, 0xd9, 0xbe, 0x77, 0x2a, 0x95,
	0xf3, 0x0c, 0x37, 0xe1, 0xc7, 0xc6, 0x09, 0xe7, 0xf2, 0x0a, 0x85, 0x2b, 0xa9, 0xc2, 0x78, 0x1f,
	0x90, 0x0c, 0xc5, 0xb7, 0x91, 0xd9, 0xbb, 0x0b, 0x10, 0x09, 0x74, 0x92, 0x64, 0x71, 0x43, 0x22,
	0x9a, 0x85, 0xcf, 0x41, 0xcd, 0x2d, 0x62, 0x07, 0x7a, 0x98, 0x11, 0xa9, 0xd1, 0xbb, 0x9e, 0x1e,
	0x24, 0xc3, 0x54, 0xf2, 0xc8, 0x47, 0x2f, 0x17, 0xa2, 0xa3, 0x0e, 0xd4, 0xdf, 0xfb, 0xe1, 0x3b,
	0x12, 0x0a, 0x2d, 0x5b, 0x7a, 0x3c, 0xc5, 0x53, 0xe8, 0xe6, 0x52, 0x2f, 0x43, 0x4b, 0x49, 0x0f,
	0x00, 0xa5, 0xb9, 0x97, 0xe1, 0x62, 0x61, 0x2f, 0xe1, 0x93, 0x16, 0x4b, 0x1c, 0x0a, 0x7f, 0x03,
	0xff, 0xe3, 0xe5, 0x2c, 0x81, 0x2b, 0x2a, 0xf2, 0x1d, 0x5c, 0x8f, 0xd3, 0x9c, 0x27, 0x55, 0x5c,
	0x57, 0xc9, 0xaf, 0x0b, 0x00, 0x65, 0xd6, 0xc4, 0x9b, 0x7d, 0x06, 0xcd, 0x78, 0x51, 0x26, 0xb1,
	0x0d, 0x89, 0x9d, 0xb0, 0xfc, 0xfe, 0x67, 0x0d, 0x9f, 0x80, 0x9a, 0xdb, 0x71, 0x15, 0xc9, 0xc2,
	0xe1, 0xfe, 0x52, 0xa0, 0xf9, 0x3a, 0xb4, 0x69, 0x72, 0xb9, 0xf7, 0x32, 0xb9, 0x6e, 0xf7, 0x6e,
	0xa7, 0xda, 0x66, 0xbd, 0x76, 0xaf, 0x9e, 0xf1, 0x6f, 0xa1, 0x31, 0x9d, 0x07, 0x13, 0xd3, 0x08,
	0xe8, 0x22, 0x24, 0x9c, 0x71, 0xee, 0xbe, 0x3e, 0x1f, 0x8e, 0x06, 0xc2, 0xa6, 0xc3, 0x74, 0x1e,
	0xc8, 0x31, 0xbe, 0x09, 0x55, 0x5e, 0xff, 0x9b, 0xd0, 0x78, 0x3e, 0x1c, 0x4d, 0x06, 0xfd, 0xd1,
	0xe9, 0x99, 0x7e, 0xa8, 0x96, 0xf0, 0x1f, 0x0a, 0x80, 0xa4, 0xc2, 0x8e, 0xf7, 0x00, 0x5a, 0xd4,
	0xa7, 0x86, 0xf3, 0x92, 0x44, 0x91, 0x31, 0xe7, 0x97, 0x4d, 0xd9, 0xa9, 0xea, 0x79, 0x10, 0xdd,
	0x81, 0x8d, 0x88, 0x1a, 0x21, 0x3d, 0xb5, 0x5d, 0x71, 0x6d, 0xaa, 0x7a, 0x0a, 0x30, 0x41, 0x89,
	0x67, 0x71, 0x5b, 0x85, 0xdb, 0xe2, 0x29, 0xba, 0x07, 0xe0, 0x2d, 0xdc, 0xd7, 0x52, 0xed, 0x2a,
	0x57, 0x3b, 0x83, 0xa0, 0x2d, 0x58, 0x23, 0x61, 0xe8, 0x87, 0x9d, 0x35, 0x7e, 0x6c, 0x31, 0xc1,
	0x7f, 0x96, 0x01, 0x86, 0x84, 0xc6, 0x8a, 0x3e, 0xce, 0x29, 0x7a, 0x2b, 0x3d, 0x7a, 0xea, 0xf3,
	0x09, 0x7a, 0x7e, 0x05, 0xf5, 0x99, 0xed, 0x50, 0x91, 0x7d, 0x56, 0xfe, 0x6a, 0x1a, 0xf0, 0x88,
	0x1b, 0xf4, 0xd8, 0x01, 0x7d, 0x0e, 0x6d, 0xd3, 0x77, 0x1c, 0x62, 0x52, 0x3f, 0x14, 0xd5, 0x56,
	0xe5, 0xe1, 0x5a, 0x09, 0xca, 0xeb, 0xed, 0x4b, 0xd8, 0xe4, 0x62, 0x4c, 0xa8, 0xed, 0x92, 0x88,
	0x1a, 0x6e, 0xc0, 0xcf, 0x53, 0xd5, 0xdb, 0x89, 0x46, 0x1c, 0x45, 0xf7, 0xa1, 0x45, 0x3c, 0x2b,
	0xe3, 0x56, 0xe3, 0x6e, 0x4d, 0x29, 0x17, 0xc7, 0xf0, 0x23, 0x99, 0xb9, 0x06, 0xd4, 0x93, 0xac,
	0x21, 0x80, 0xda, 0x48, 0x3f, 0x3c, 0xd2, 0xde, 0xa8, 0x0a, 0x1b, 0xf7, 0xc7, 0xa3, 0xfe, 0xe9,
	0x0b, 0xb5, 0x8c, 0xff, 0x51, 0xa0, 0x26, 0x58, 0x5f, 0x5e, 0x78, 0xc2, 0x2e, 0x7f, 0x32, 0x42,
	0xdd, 0x86, 0x0d, 0x3f, 0xb4, 0xe7, 0xb6, 0x37, 0x31, 0x22, 0xae, 0x53, 0x4b, 0x5f, 0x17, 0x40,
	0x3f, 0x42, 0x8f, 0xe0, 0x9a, 0x61, 0x9d, 0x93, 0x90, 0xda, 0xbf, 0x12, 0x6b, 0x12, 0x84, 0x64,
	0x66, 0x7f, 0x90, 0x1f, 0x47, 0x35, 0x35, 0x8c, 0x38, 0x8e, 0x1e, 0x82, 0xfa, 0xde, 0xa6, 0x6f,
	0xad, 0xd0, 0x78, 0xef, 0xc5, 0xbe, 0x42, 0xa9, 0xcd, 0x04, 0x17, 0xae, 0xf8, 0x19, 0x40, 0x4a,
	0x04, 0xb5, 0x60, 0xe3, 0x95, 0xae, 0x0d, 0xb5, 0x93, 0x49, 0x7f, 0xac, 0x96, 0x58, 0xb1, 0x8a,
	0x53, 0x1e, 0xbe, 0xe9, 0x0f, 0x4e, 0x55, 0x05, 0x21, 0x68, 0x0b, 0x40, 0x3b, 0x19, 0x1c, 0x9f,
	0x1d, 0x1c, 0x1e, 0xa8, 0x65, 0xfc, 0x9b, 0x02, 0xeb, 0x3c, 0xf3, 0xac, 0x7c, 0x3f, 0xb1, 0x36,
	0x92, 0x7a, 0x2b, 0x67, 0xea, 0x8d, 0x55, 0xa9, 0xed, 0x99, 0xbe, 0x1b, 0x38, 0x84, 0x8a, 0x12,
	0x5e, 0xd7, 0x33, 0x08, 0x5b, 0x65, 0xbe, 0x5d, 0x78, 0xef, 0x3a, 0xd5, 0xed, 0xca, 0x4e, 0x53,
	0x17, 0x13, 0xfc, 0x77, 0x19, 0x20, 0xbd, 0x7c, 0xec, 0x8a, 0xa4, 0x79, 0x55, 0xb8, 0x9a, 0x29,
	0x80, 0x6e, 0x42, 0x3d, 0x20, 0x24, 0x4c, 0x95, 0xae, 0xb1, 0x69, 0x3f, 0x42, 0xb7, 0x60, 0xdd,
	0xf1, 0x4d, 0xc3, 0x61, 0x16, 0xf9, 0x35, 0xe2, 0xf3, 0x7e, 0xc4, 0xca, 0xca, 0xf6, 0x28, 0x09,
	0x67, 0x86, 0x49, 0x26, 0xb6, 0x67, 0x91, 0x0f, 0xf2, 0x06, 0xb5, 0x13, 0x58, 0x63, 0x28, 0x2b,
	0x53, 0xc3, 0xb2, 0x42, 0x12, 0x45, 0x93, 0x99, 0xe1, 0xda, 0xce, 0x05, 0x2f, 0xbf, 0x96, 0xde,
	0x92, 0xe8, 0x11, 0x07, 0xd1, 0x13, 0xc9, 0xc1, 0x16, 0x75, 0xc7, 0x5e, 0x54, 0xd9, 0x61, 0x69,
	0xa3, 0xbe, 0xf0, 0x7c, 0x1d, 0x1a, 0x41, 0x40, 0x42, 0xc1, 0x4e, 0x0b, 0xd0, 0x7e, 0xcc, 0xce,
	0x0e, 0x3a, 0xf5, 0x8f, 0xac, 0x11, 0xbc, 0xb5, 0x00, 0x7d, 0x01, 0xb5, 0x45, 0x60, 0x19, 0x94,
	0x74, 0xd6, 0xf9, 0x92, 0x36, 0xcb, 0x0a, 0xfb, 0x4e, 0x9d, 0x71, 0x54, 0x97, 0xd6, 0xde, 0xef,
	0x35, 0xa8, 0x3f, 0xe7, 0xf9, 0xb2, 0xd0, 0x33, 0x68, 0x66, 0x5f, 0x16, 0x74, 0x37, 0xcd, 0xe4,
	0x8a, 0x17, 0xa7, 0xbb, 0x99, 0x9a, 0x45, 0x5b, 0x57, 0x42, 0x47, 0xa0, 0x16, 0x5f, 0x19, 0x54,
	0x74, 0xeb, 0xfe, 0x3f, 0x05, 0x56, 0x3e, 0x49, 0xb8, 0x84, 0x46, 0xe2, 0xb5, 0x5a, 0x7a, 0x47,
	0x97, 0x83, 0x3d, 0xc8, 0x07, 0x5b, 0xfd, 0xf2, 0xe2, 0x12, 0xd2, 0xa0, 0x91, 0xd9, 0x08, 0xdd,
	0xc9, 0xf7, 0x31, 0x85, 0x93, 0x75, 0x2f, 0xb1, 0x8a, 0x50, 0x4f, 0x61, 0x8d, 0x7f, 0xbb, 0xd1,
	0x8d, 0xd5, 0xef, 0x4a, 0x77, 0x6b, 0x09, 0xe7, 0x0b, 0x77, 0x14, 0xb4, 0x0f, 0x95, 0x21, 0xa1,
	0x68, 0x6b, 0xd5, 0x15, 0xe9, 0xa2, 0x02, 0xca, 0x17, 0x7d, 0xad, 0xa0, 0x63, 0x68, 0x0f, 0x59,
	0xa3, 0x9d, 0xf4, 0x33, 0x59, 0xf6, 0xcb, 0xbd, 0x51, 0x96, 0x7d, 0xb1, 0x09, 0xc2, 0x25, 0x34,
	0x80, 0x8d, 0xa4, 0x5f, 0x46, 0x19, 0xd7, 0x62, 0x43, 0xde, 0xed, 0xac, 0xb4, 0x89, 0x20, 0x3f,
	0x42, 0x23, 0xd3, 0x52, 0x67, 0xf9, 0x2c, 0x77, 0xda, 0xab, 0xea, 0xe4, 0x44, 0x34, 0x9d, 0xc5,
	0x16, 0x79, 0x39, 0xbd, 0xf7, 0x2f, 0x49, 0x6f, 0xb6, 0x55, 0xc5, 0x25, 0x74, 0x00, 0x9b, 0x85,
	0x26, 0x76, 0x39, 0xd4, 0xbd, 0xe5, 0xb2, 0xcb, 0x47, 0x99, 0xd6, 0xf8, 0xbf, 0x29, 0xfb, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x34, 0xb8, 0x1a, 0x69, 0x0d, 0x00, 0x00,
}
