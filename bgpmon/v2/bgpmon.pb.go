// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/CSUNetSec/netsec-protobufs/bgpmon/v2/bgpmon.proto

package bgpmonv2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/CSUNetSec/netsec-protobufs/common"
import bgp "github.com/CSUNetSec/netsec-protobufs/protocol/bgp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WriteRequest_Type int32

const (
	WriteRequest_BGP_CAPTURE WriteRequest_Type = 0
)

var WriteRequest_Type_name = map[int32]string{
	0: "BGP_CAPTURE",
}
var WriteRequest_Type_value = map[string]int32{
	"BGP_CAPTURE": 0,
}

func (x WriteRequest_Type) String() string {
	return proto.EnumName(WriteRequest_Type_name, int32(x))
}
func (WriteRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{9, 0}
}

type GetRequest_Type int32

const (
	GetRequest_CAPTURE GetRequest_Type = 0
	GetRequest_PREFIX  GetRequest_Type = 1
	GetRequest_ASPATH  GetRequest_Type = 2
)

var GetRequest_Type_name = map[int32]string{
	0: "CAPTURE",
	1: "PREFIX",
	2: "ASPATH",
}
var GetRequest_Type_value = map[string]int32{
	"CAPTURE": 0,
	"PREFIX":  1,
	"ASPATH":  2,
}

func (x GetRequest_Type) String() string {
	return proto.EnumName(GetRequest_Type_name, int32(x))
}
func (GetRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{11, 0}
}

// maximal field value = 4
type Filter_FilterType int32

const (
	Filter_ORIGIN_AS      Filter_FilterType = 0
	Filter_PREFIXEXACT    Filter_FilterType = 1
	Filter_PREFIXINCLUDED Filter_FilterType = 2
)

var Filter_FilterType_name = map[int32]string{
	0: "ORIGIN_AS",
	1: "PREFIXEXACT",
	2: "PREFIXINCLUDED",
}
var Filter_FilterType_value = map[string]int32{
	"ORIGIN_AS":      0,
	"PREFIXEXACT":    1,
	"PREFIXINCLUDED": 2,
}

func (x Filter_FilterType) String() string {
	return proto.EnumName(Filter_FilterType_name, int32(x))
}
func (Filter_FilterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{12, 0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type SessionType struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionType) Reset()         { *m = SessionType{} }
func (m *SessionType) String() string { return proto.CompactTextString(m) }
func (*SessionType) ProtoMessage()    {}
func (*SessionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{1}
}
func (m *SessionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionType.Unmarshal(m, b)
}
func (m *SessionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionType.Marshal(b, m, deterministic)
}
func (dst *SessionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionType.Merge(dst, src)
}
func (m *SessionType) XXX_Size() int {
	return xxx_messageInfo_SessionType.Size(m)
}
func (m *SessionType) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionType.DiscardUnknown(m)
}

var xxx_messageInfo_SessionType proto.InternalMessageInfo

func (m *SessionType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SessionType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SessionType) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type SessionInfoRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionInfoRequest) Reset()         { *m = SessionInfoRequest{} }
func (m *SessionInfoRequest) String() string { return proto.CompactTextString(m) }
func (*SessionInfoRequest) ProtoMessage()    {}
func (*SessionInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{2}
}
func (m *SessionInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionInfoRequest.Unmarshal(m, b)
}
func (m *SessionInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionInfoRequest.Marshal(b, m, deterministic)
}
func (dst *SessionInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionInfoRequest.Merge(dst, src)
}
func (m *SessionInfoRequest) XXX_Size() int {
	return xxx_messageInfo_SessionInfoRequest.Size(m)
}
func (m *SessionInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionInfoRequest proto.InternalMessageInfo

func (m *SessionInfoRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type SessionInfoReply struct {
	Type                 *SessionType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SessionId            string       `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Workers              uint32       `protobuf:"varint,3,opt,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SessionInfoReply) Reset()         { *m = SessionInfoReply{} }
func (m *SessionInfoReply) String() string { return proto.CompactTextString(m) }
func (*SessionInfoReply) ProtoMessage()    {}
func (*SessionInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{3}
}
func (m *SessionInfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionInfoReply.Unmarshal(m, b)
}
func (m *SessionInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionInfoReply.Marshal(b, m, deterministic)
}
func (dst *SessionInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionInfoReply.Merge(dst, src)
}
func (m *SessionInfoReply) XXX_Size() int {
	return xxx_messageInfo_SessionInfoReply.Size(m)
}
func (m *SessionInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_SessionInfoReply proto.InternalMessageInfo

func (m *SessionInfoReply) GetType() *SessionType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SessionInfoReply) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionInfoReply) GetWorkers() uint32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

type ListAvailableSessionsReply struct {
	AvailableSessions    []*SessionType `protobuf:"bytes,1,rep,name=available_sessions,json=availableSessions,proto3" json:"available_sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListAvailableSessionsReply) Reset()         { *m = ListAvailableSessionsReply{} }
func (m *ListAvailableSessionsReply) String() string { return proto.CompactTextString(m) }
func (*ListAvailableSessionsReply) ProtoMessage()    {}
func (*ListAvailableSessionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{4}
}
func (m *ListAvailableSessionsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAvailableSessionsReply.Unmarshal(m, b)
}
func (m *ListAvailableSessionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAvailableSessionsReply.Marshal(b, m, deterministic)
}
func (dst *ListAvailableSessionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAvailableSessionsReply.Merge(dst, src)
}
func (m *ListAvailableSessionsReply) XXX_Size() int {
	return xxx_messageInfo_ListAvailableSessionsReply.Size(m)
}
func (m *ListAvailableSessionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAvailableSessionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListAvailableSessionsReply proto.InternalMessageInfo

func (m *ListAvailableSessionsReply) GetAvailableSessions() []*SessionType {
	if m != nil {
		return m.AvailableSessions
	}
	return nil
}

//
// Session Command Messages
type CloseSessionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseSessionRequest) Reset()         { *m = CloseSessionRequest{} }
func (m *CloseSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CloseSessionRequest) ProtoMessage()    {}
func (*CloseSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{5}
}
func (m *CloseSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseSessionRequest.Unmarshal(m, b)
}
func (m *CloseSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseSessionRequest.Marshal(b, m, deterministic)
}
func (dst *CloseSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseSessionRequest.Merge(dst, src)
}
func (m *CloseSessionRequest) XXX_Size() int {
	return xxx_messageInfo_CloseSessionRequest.Size(m)
}
func (m *CloseSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseSessionRequest proto.InternalMessageInfo

func (m *CloseSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type ListOpenSessionsReply struct {
	SessionId            []string `protobuf:"bytes,1,rep,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOpenSessionsReply) Reset()         { *m = ListOpenSessionsReply{} }
func (m *ListOpenSessionsReply) String() string { return proto.CompactTextString(m) }
func (*ListOpenSessionsReply) ProtoMessage()    {}
func (*ListOpenSessionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{6}
}
func (m *ListOpenSessionsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOpenSessionsReply.Unmarshal(m, b)
}
func (m *ListOpenSessionsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOpenSessionsReply.Marshal(b, m, deterministic)
}
func (dst *ListOpenSessionsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOpenSessionsReply.Merge(dst, src)
}
func (m *ListOpenSessionsReply) XXX_Size() int {
	return xxx_messageInfo_ListOpenSessionsReply.Size(m)
}
func (m *ListOpenSessionsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOpenSessionsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListOpenSessionsReply proto.InternalMessageInfo

func (m *ListOpenSessionsReply) GetSessionId() []string {
	if m != nil {
		return m.SessionId
	}
	return nil
}

type OpenSessionRequest struct {
	SessionName          string   `protobuf:"bytes,1,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Workers              uint32   `protobuf:"varint,3,opt,name=workers,proto3" json:"workers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenSessionRequest) Reset()         { *m = OpenSessionRequest{} }
func (m *OpenSessionRequest) String() string { return proto.CompactTextString(m) }
func (*OpenSessionRequest) ProtoMessage()    {}
func (*OpenSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{7}
}
func (m *OpenSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenSessionRequest.Unmarshal(m, b)
}
func (m *OpenSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenSessionRequest.Marshal(b, m, deterministic)
}
func (dst *OpenSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenSessionRequest.Merge(dst, src)
}
func (m *OpenSessionRequest) XXX_Size() int {
	return xxx_messageInfo_OpenSessionRequest.Size(m)
}
func (m *OpenSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenSessionRequest proto.InternalMessageInfo

func (m *OpenSessionRequest) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

func (m *OpenSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *OpenSessionRequest) GetWorkers() uint32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

type OpenSessionReply struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenSessionReply) Reset()         { *m = OpenSessionReply{} }
func (m *OpenSessionReply) String() string { return proto.CompactTextString(m) }
func (*OpenSessionReply) ProtoMessage()    {}
func (*OpenSessionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{8}
}
func (m *OpenSessionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenSessionReply.Unmarshal(m, b)
}
func (m *OpenSessionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenSessionReply.Marshal(b, m, deterministic)
}
func (dst *OpenSessionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenSessionReply.Merge(dst, src)
}
func (m *OpenSessionReply) XXX_Size() int {
	return xxx_messageInfo_OpenSessionReply.Size(m)
}
func (m *OpenSessionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenSessionReply.DiscardUnknown(m)
}

var xxx_messageInfo_OpenSessionReply proto.InternalMessageInfo

func (m *OpenSessionReply) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

//
// Write Messages
type WriteRequest struct {
	Type                 WriteRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bgpmonv2.WriteRequest_Type" json:"type,omitempty"`
	SessionId            string            `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	BgpCapture           *BGPCapture       `protobuf:"bytes,3,opt,name=bgp_capture,json=bgpCapture,proto3" json:"bgp_capture,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{9}
}
func (m *WriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRequest.Unmarshal(m, b)
}
func (m *WriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRequest.Marshal(b, m, deterministic)
}
func (dst *WriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRequest.Merge(dst, src)
}
func (m *WriteRequest) XXX_Size() int {
	return xxx_messageInfo_WriteRequest.Size(m)
}
func (m *WriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRequest proto.InternalMessageInfo

func (m *WriteRequest) GetType() WriteRequest_Type {
	if m != nil {
		return m.Type
	}
	return WriteRequest_BGP_CAPTURE
}

func (m *WriteRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *WriteRequest) GetBgpCapture() *BGPCapture {
	if m != nil {
		return m.BgpCapture
	}
	return nil
}

type WriteReply struct {
	TotalMessages        uint64   `protobuf:"varint,1,opt,name=totalMessages,proto3" json:"totalMessages,omitempty"`
	StartTime            uint64   `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              uint64   `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	NumWorkers           uint32   `protobuf:"varint,4,opt,name=numWorkers,proto3" json:"numWorkers,omitempty"`
	Error                string   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteReply) Reset()         { *m = WriteReply{} }
func (m *WriteReply) String() string { return proto.CompactTextString(m) }
func (*WriteReply) ProtoMessage()    {}
func (*WriteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{10}
}
func (m *WriteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteReply.Unmarshal(m, b)
}
func (m *WriteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteReply.Marshal(b, m, deterministic)
}
func (dst *WriteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteReply.Merge(dst, src)
}
func (m *WriteReply) XXX_Size() int {
	return xxx_messageInfo_WriteReply.Size(m)
}
func (m *WriteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteReply.DiscardUnknown(m)
}

var xxx_messageInfo_WriteReply proto.InternalMessageInfo

func (m *WriteReply) GetTotalMessages() uint64 {
	if m != nil {
		return m.TotalMessages
	}
	return 0
}

func (m *WriteReply) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *WriteReply) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *WriteReply) GetNumWorkers() uint32 {
	if m != nil {
		return m.NumWorkers
	}
	return 0
}

func (m *WriteReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

//
// Get Messages
type GetRequest struct {
	Type                 GetRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bgpmonv2.GetRequest_Type" json:"type,omitempty"`
	SessionId            string          `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Filters              []*Filter       `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	CollectorName        string          `protobuf:"bytes,4,opt,name=collector_name,json=collectorName,proto3" json:"collector_name,omitempty"`
	StartTimestamp       string          `protobuf:"bytes,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp         string          `protobuf:"bytes,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{11}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (dst *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(dst, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetType() GetRequest_Type {
	if m != nil {
		return m.Type
	}
	return GetRequest_CAPTURE
}

func (m *GetRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *GetRequest) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *GetRequest) GetCollectorName() string {
	if m != nil {
		return m.CollectorName
	}
	return ""
}

func (m *GetRequest) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *GetRequest) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

type Filter struct {
	Type                 Filter_FilterType `protobuf:"varint,1,opt,name=type,proto3,enum=bgpmonv2.Filter_FilterType" json:"type,omitempty"`
	OriginAs             uint32            `protobuf:"varint,2,opt,name=origin_as,json=originAs,proto3" json:"origin_as,omitempty"`
	AdvertizedPrefix     string            `protobuf:"bytes,3,opt,name=advertized_prefix,json=advertizedPrefix,proto3" json:"advertized_prefix,omitempty"`
	WithdrawnPrefix      string            `protobuf:"bytes,4,opt,name=withdrawn_prefix,json=withdrawnPrefix,proto3" json:"withdrawn_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{12}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (dst *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(dst, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetType() Filter_FilterType {
	if m != nil {
		return m.Type
	}
	return Filter_ORIGIN_AS
}

func (m *Filter) GetOriginAs() uint32 {
	if m != nil {
		return m.OriginAs
	}
	return 0
}

func (m *Filter) GetAdvertizedPrefix() string {
	if m != nil {
		return m.AdvertizedPrefix
	}
	return ""
}

func (m *Filter) GetWithdrawnPrefix() string {
	if m != nil {
		return m.WithdrawnPrefix
	}
	return ""
}

// GetReply carries chunks of a PBStream byte array.
// If it is incomplete then the client should read all
// the following messages until the incomplete flag is not set
// and then try to unmarshal the message. Also the Type once an
// incomplete stream starts has to remain the same accros all subsequent
// messages
type GetReply struct {
	// maximal field value = 4
	Type                 GetRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bgpmonv2.GetRequest_Type" json:"type,omitempty"`
	Error                string          `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Incomplete           bool            `protobuf:"varint,3,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
	Chunk                [][]byte        `protobuf:"bytes,4,rep,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{13}
}
func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (dst *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(dst, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetType() GetRequest_Type {
	if m != nil {
		return m.Type
	}
	return GetRequest_CAPTURE
}

func (m *GetReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetReply) GetIncomplete() bool {
	if m != nil {
		return m.Incomplete
	}
	return false
}

func (m *GetReply) GetChunk() [][]byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

// a message of Capture type to facilitate the represtation of a
// BGP Update from multuple sources (live/mrt etc) to bgpmon
// and other systems. the inner actual update is defined in protocol/bgp
type BGPCapture struct {
	Timestamp            uint32                   `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PeerAs               uint32                   `protobuf:"varint,2,opt,name=peer_as,json=peerAs,proto3" json:"peer_as,omitempty"`
	LocalAs              uint32                   `protobuf:"varint,3,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	InterfaceIndex       uint32                   `protobuf:"varint,4,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty"`
	AddressFamily        uint32                   `protobuf:"varint,5,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty"`
	PeerIp               *common.IPAddressWrapper `protobuf:"bytes,6,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	LocalIp              *common.IPAddressWrapper `protobuf:"bytes,7,opt,name=local_ip,json=localIp,proto3" json:"local_ip,omitempty"`
	Update               *bgp.BGPUpdate           `protobuf:"bytes,8,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BGPCapture) Reset()         { *m = BGPCapture{} }
func (m *BGPCapture) String() string { return proto.CompactTextString(m) }
func (*BGPCapture) ProtoMessage()    {}
func (*BGPCapture) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpmon_c10cf5229e418f5e, []int{14}
}
func (m *BGPCapture) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPCapture.Unmarshal(m, b)
}
func (m *BGPCapture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPCapture.Marshal(b, m, deterministic)
}
func (dst *BGPCapture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPCapture.Merge(dst, src)
}
func (m *BGPCapture) XXX_Size() int {
	return xxx_messageInfo_BGPCapture.Size(m)
}
func (m *BGPCapture) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPCapture.DiscardUnknown(m)
}

var xxx_messageInfo_BGPCapture proto.InternalMessageInfo

func (m *BGPCapture) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BGPCapture) GetPeerAs() uint32 {
	if m != nil {
		return m.PeerAs
	}
	return 0
}

func (m *BGPCapture) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BGPCapture) GetInterfaceIndex() uint32 {
	if m != nil {
		return m.InterfaceIndex
	}
	return 0
}

func (m *BGPCapture) GetAddressFamily() uint32 {
	if m != nil {
		return m.AddressFamily
	}
	return 0
}

func (m *BGPCapture) GetPeerIp() *common.IPAddressWrapper {
	if m != nil {
		return m.PeerIp
	}
	return nil
}

func (m *BGPCapture) GetLocalIp() *common.IPAddressWrapper {
	if m != nil {
		return m.LocalIp
	}
	return nil
}

func (m *BGPCapture) GetUpdate() *bgp.BGPUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "bgpmonv2.Empty")
	proto.RegisterType((*SessionType)(nil), "bgpmonv2.SessionType")
	proto.RegisterType((*SessionInfoRequest)(nil), "bgpmonv2.SessionInfoRequest")
	proto.RegisterType((*SessionInfoReply)(nil), "bgpmonv2.SessionInfoReply")
	proto.RegisterType((*ListAvailableSessionsReply)(nil), "bgpmonv2.ListAvailableSessionsReply")
	proto.RegisterType((*CloseSessionRequest)(nil), "bgpmonv2.CloseSessionRequest")
	proto.RegisterType((*ListOpenSessionsReply)(nil), "bgpmonv2.ListOpenSessionsReply")
	proto.RegisterType((*OpenSessionRequest)(nil), "bgpmonv2.OpenSessionRequest")
	proto.RegisterType((*OpenSessionReply)(nil), "bgpmonv2.OpenSessionReply")
	proto.RegisterType((*WriteRequest)(nil), "bgpmonv2.WriteRequest")
	proto.RegisterType((*WriteReply)(nil), "bgpmonv2.WriteReply")
	proto.RegisterType((*GetRequest)(nil), "bgpmonv2.GetRequest")
	proto.RegisterType((*Filter)(nil), "bgpmonv2.Filter")
	proto.RegisterType((*GetReply)(nil), "bgpmonv2.GetReply")
	proto.RegisterType((*BGPCapture)(nil), "bgpmonv2.BGPCapture")
	proto.RegisterEnum("bgpmonv2.WriteRequest_Type", WriteRequest_Type_name, WriteRequest_Type_value)
	proto.RegisterEnum("bgpmonv2.GetRequest_Type", GetRequest_Type_name, GetRequest_Type_value)
	proto.RegisterEnum("bgpmonv2.Filter_FilterType", Filter_FilterType_name, Filter_FilterType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BgpmondClient is the client API for Bgpmond service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BgpmondClient interface {
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	ListOpenSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOpenSessionsReply, error)
	ListAvailableSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAvailableSessionsReply, error)
	OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Bgpmond_WriteClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Bgpmond_GetClient, error)
	GetSessionInfo(ctx context.Context, in *SessionInfoRequest, opts ...grpc.CallOption) (*SessionInfoReply, error)
}

type bgpmondClient struct {
	cc *grpc.ClientConn
}

func NewBgpmondClient(cc *grpc.ClientConn) BgpmondClient {
	return &bgpmondClient{cc}
}

func (c *bgpmondClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bgpmonv2.Bgpmond/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListOpenSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListOpenSessionsReply, error) {
	out := new(ListOpenSessionsReply)
	err := c.cc.Invoke(ctx, "/bgpmonv2.Bgpmond/ListOpenSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListAvailableSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAvailableSessionsReply, error) {
	out := new(ListAvailableSessionsReply)
	err := c.cc.Invoke(ctx, "/bgpmonv2.Bgpmond/ListAvailableSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error) {
	out := new(OpenSessionReply)
	err := c.cc.Invoke(ctx, "/bgpmonv2.Bgpmond/OpenSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) Write(ctx context.Context, opts ...grpc.CallOption) (Bgpmond_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bgpmond_serviceDesc.Streams[0], "/bgpmonv2.Bgpmond/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpmondWriteClient{stream}
	return x, nil
}

type Bgpmond_WriteClient interface {
	Send(*WriteRequest) error
	CloseAndRecv() (*WriteReply, error)
	grpc.ClientStream
}

type bgpmondWriteClient struct {
	grpc.ClientStream
}

func (x *bgpmondWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bgpmondWriteClient) CloseAndRecv() (*WriteReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpmondClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Bgpmond_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bgpmond_serviceDesc.Streams[1], "/bgpmonv2.Bgpmond/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpmondGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bgpmond_GetClient interface {
	Recv() (*GetReply, error)
	grpc.ClientStream
}

type bgpmondGetClient struct {
	grpc.ClientStream
}

func (x *bgpmondGetClient) Recv() (*GetReply, error) {
	m := new(GetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpmondClient) GetSessionInfo(ctx context.Context, in *SessionInfoRequest, opts ...grpc.CallOption) (*SessionInfoReply, error) {
	out := new(SessionInfoReply)
	err := c.cc.Invoke(ctx, "/bgpmonv2.Bgpmond/GetSessionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpmondServer is the server API for Bgpmond service.
type BgpmondServer interface {
	CloseSession(context.Context, *CloseSessionRequest) (*Empty, error)
	ListOpenSessions(context.Context, *Empty) (*ListOpenSessionsReply, error)
	ListAvailableSessions(context.Context, *Empty) (*ListAvailableSessionsReply, error)
	OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionReply, error)
	Write(Bgpmond_WriteServer) error
	Get(*GetRequest, Bgpmond_GetServer) error
	GetSessionInfo(context.Context, *SessionInfoRequest) (*SessionInfoReply, error)
}

func RegisterBgpmondServer(s *grpc.Server, srv BgpmondServer) {
	s.RegisterService(&_Bgpmond_serviceDesc, srv)
}

func _Bgpmond_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListOpenSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListOpenSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/ListOpenSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListOpenSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListAvailableSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListAvailableSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/ListAvailableSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListAvailableSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).OpenSession(ctx, req.(*OpenSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BgpmondServer).Write(&bgpmondWriteServer{stream})
}

type Bgpmond_WriteServer interface {
	SendAndClose(*WriteReply) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type bgpmondWriteServer struct {
	grpc.ServerStream
}

func (x *bgpmondWriteServer) SendAndClose(m *WriteReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bgpmondWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bgpmond_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpmondServer).Get(m, &bgpmondGetServer{stream})
}

type Bgpmond_GetServer interface {
	Send(*GetReply) error
	grpc.ServerStream
}

type bgpmondGetServer struct {
	grpc.ServerStream
}

func (x *bgpmondGetServer) Send(m *GetReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Bgpmond_GetSessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).GetSessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmonv2.Bgpmond/GetSessionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).GetSessionInfo(ctx, req.(*SessionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bgpmond_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bgpmonv2.Bgpmond",
	HandlerType: (*BgpmondServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseSession",
			Handler:    _Bgpmond_CloseSession_Handler,
		},
		{
			MethodName: "ListOpenSessions",
			Handler:    _Bgpmond_ListOpenSessions_Handler,
		},
		{
			MethodName: "ListAvailableSessions",
			Handler:    _Bgpmond_ListAvailableSessions_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _Bgpmond_OpenSession_Handler,
		},
		{
			MethodName: "GetSessionInfo",
			Handler:    _Bgpmond_GetSessionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Bgpmond_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Bgpmond_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/CSUNetSec/netsec-protobufs/bgpmon/v2/bgpmon.proto",
}

func init() {
	proto.RegisterFile("github.com/CSUNetSec/netsec-protobufs/bgpmon/v2/bgpmon.proto", fileDescriptor_bgpmon_c10cf5229e418f5e)
}

var fileDescriptor_bgpmon_c10cf5229e418f5e = []byte{
	// 1074 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xb6, 0x6c, 0xc7, 0x76, 0x8e, 0x63, 0x47, 0x5d, 0x52, 0xea, 0xba, 0x2d, 0x04, 0x51, 0x20,
	0xa5, 0x53, 0x87, 0x3a, 0xc0, 0x4c, 0x67, 0xb8, 0xa8, 0xe3, 0x24, 0x46, 0x33, 0x21, 0xf5, 0x28,
	0xc9, 0xa4, 0x77, 0x1a, 0x59, 0x5a, 0x3b, 0x9a, 0xea, 0x67, 0xd1, 0xae, 0x93, 0x86, 0x7b, 0xde,
	0x83, 0x4b, 0xae, 0x78, 0x04, 0x1e, 0x89, 0xe1, 0x11, 0x98, 0xfd, 0x91, 0x25, 0xff, 0x64, 0x48,
	0x7b, 0xe1, 0xf1, 0xee, 0x77, 0x7e, 0xf4, 0xed, 0x77, 0x8e, 0x74, 0x16, 0x7e, 0x9a, 0xf8, 0xec,
	0x72, 0x3a, 0xea, 0xb8, 0x71, 0xb8, 0xdb, 0x3f, 0x3d, 0x3f, 0xc1, 0xec, 0x14, 0xbb, 0xbb, 0x11,
	0x66, 0x14, 0xbb, 0x2f, 0x48, 0x12, 0xb3, 0x78, 0x34, 0x1d, 0xd3, 0xdd, 0xd1, 0x84, 0x84, 0x71,
	0xb4, 0x7b, 0xd5, 0x55, 0xab, 0x8e, 0x30, 0xa1, 0x9a, 0xdc, 0x5d, 0x75, 0xdb, 0xaf, 0xee, 0x96,
	0xc7, 0x8d, 0x43, 0x9e, 0x47, 0xfe, 0xc9, 0x24, 0xed, 0x3b, 0x52, 0x10, 0x2b, 0x37, 0x0e, 0x38,
	0x03, 0xfe, 0x93, 0xd1, 0x46, 0x15, 0xd6, 0x0e, 0x43, 0xc2, 0x6e, 0x0c, 0x13, 0xea, 0xa7, 0x98,
	0x52, 0x3f, 0x8e, 0xce, 0x6e, 0x08, 0x46, 0x08, 0xca, 0x91, 0x13, 0xe2, 0x96, 0xb6, 0xad, 0xed,
	0xac, 0x5b, 0x62, 0xcd, 0x31, 0x76, 0x43, 0x70, 0xab, 0x28, 0x31, 0xa6, 0xfc, 0x3c, 0x4c, 0xdd,
	0x56, 0x49, 0x62, 0x7c, 0x6d, 0xec, 0x01, 0x52, 0xa9, 0xcc, 0x68, 0x1c, 0x5b, 0xf8, 0xd7, 0x29,
	0xa6, 0x0c, 0x3d, 0x01, 0xa0, 0x12, 0xb5, 0x7d, 0x4f, 0xe5, 0x5d, 0x57, 0x88, 0xe9, 0x19, 0x57,
	0xa0, 0xcf, 0x05, 0x91, 0xe0, 0x06, 0x3d, 0x53, 0x0f, 0xe4, 0xce, 0xf5, 0xee, 0xfd, 0x4e, 0x2a,
	0x57, 0x27, 0xc7, 0x54, 0xf1, 0x98, 0xcf, 0x5e, 0x5c, 0xc8, 0x8e, 0x5a, 0x50, 0xbd, 0x8e, 0x93,
	0x77, 0x38, 0xa1, 0x82, 0x69, 0xc3, 0x4a, 0xb7, 0xc6, 0x08, 0xda, 0xc7, 0x3e, 0x65, 0xbd, 0x2b,
	0xc7, 0x0f, 0x9c, 0x51, 0x80, 0x55, 0x6a, 0x2a, 0x19, 0x1c, 0x00, 0x72, 0x52, 0x8b, 0xad, 0xd2,
	0xd1, 0x96, 0xb6, 0x5d, 0xba, 0x9d, 0xcf, 0x3d, 0x67, 0x31, 0x95, 0xf1, 0x3d, 0x7c, 0xd2, 0x0f,
	0x62, 0x9a, 0x02, 0x77, 0x54, 0xe4, 0x47, 0xb8, 0xcf, 0x99, 0xbd, 0x21, 0x38, 0x9a, 0x27, 0xb5,
	0x18, 0x57, 0x9a, 0x8f, 0x23, 0x80, 0x72, 0x31, 0xe9, 0xc3, 0xbe, 0x80, 0x8d, 0x34, 0x28, 0x57,
	0xd8, 0xba, 0xc2, 0x4e, 0x78, 0x7d, 0x3f, 0x5a, 0xc3, 0x97, 0xa0, 0xcf, 0x3d, 0x71, 0x15, 0xc9,
	0x85, 0xc3, 0xfd, 0xa5, 0xc1, 0xc6, 0x45, 0xe2, 0x33, 0x9c, 0xf2, 0xdb, 0xcd, 0xd5, 0xba, 0xd9,
	0x7d, 0x94, 0x69, 0x9b, 0xf7, 0xea, 0xdc, 0xbd, 0xe2, 0x3f, 0x40, 0x7d, 0x34, 0x21, 0xb6, 0xeb,
	0x10, 0x36, 0x4d, 0xb0, 0x60, 0x5c, 0xef, 0x6e, 0x65, 0x69, 0xf7, 0x07, 0xc3, 0xbe, 0xb4, 0x59,
	0x30, 0x9a, 0x10, 0xb5, 0x36, 0x1e, 0x40, 0x59, 0xf4, 0xff, 0x26, 0xd4, 0xf7, 0x07, 0x43, 0xbb,
	0xdf, 0x1b, 0x9e, 0x9d, 0x5b, 0x87, 0x7a, 0xc1, 0xf8, 0x43, 0x03, 0x50, 0x54, 0xf8, 0xf1, 0x9e,
	0x42, 0x83, 0xc5, 0xcc, 0x09, 0x7e, 0xc1, 0x94, 0x3a, 0x13, 0x4c, 0x05, 0xef, 0xb2, 0x35, 0x0f,
	0xa2, 0xc7, 0xb0, 0x4e, 0x99, 0x93, 0xb0, 0x33, 0x3f, 0x94, 0xaf, 0x4d, 0xd9, 0xca, 0x00, 0x2e,
	0x28, 0x8e, 0x3c, 0x61, 0x2b, 0x09, 0x5b, 0xba, 0x45, 0x9f, 0x01, 0x44, 0xd3, 0xf0, 0x42, 0xa9,
	0x5d, 0x16, 0x6a, 0xe7, 0x10, 0xb4, 0x05, 0x6b, 0x38, 0x49, 0xe2, 0xa4, 0xb5, 0x26, 0x8e, 0x2d,
	0x37, 0xc6, 0x9f, 0x45, 0x80, 0x01, 0x66, 0xa9, 0xa2, 0x2f, 0xe6, 0x14, 0x7d, 0x98, 0x1d, 0x3d,
	0xf3, 0xf9, 0x00, 0x3d, 0xbf, 0x85, 0xea, 0xd8, 0x0f, 0x98, 0xac, 0x3e, 0x6f, 0x7f, 0x3d, 0x4b,
	0x78, 0x24, 0x0c, 0x56, 0xea, 0x80, 0xbe, 0x82, 0xa6, 0x1b, 0x07, 0x01, 0x76, 0x59, 0x9c, 0xc8,
	0x6e, 0x2b, 0x8b, 0x74, 0x8d, 0x19, 0x2a, 0xfa, 0xed, 0x1b, 0xd8, 0x14, 0x62, 0xd8, 0xcc, 0x0f,
	0x31, 0x65, 0x4e, 0x48, 0xd4, 0x79, 0x9a, 0x33, 0x8d, 0x04, 0x8a, 0xbe, 0x84, 0x06, 0x8e, 0xbc,
	0x9c, 0x5b, 0x45, 0xb8, 0x6d, 0x28, 0xb9, 0x04, 0x66, 0x3c, 0x57, 0x95, 0xab, 0x43, 0x75, 0x56,
	0x35, 0x04, 0x50, 0x19, 0x5a, 0x87, 0x47, 0xe6, 0x5b, 0x5d, 0xe3, 0xeb, 0xde, 0xe9, 0xb0, 0x77,
	0xf6, 0xb3, 0x5e, 0x34, 0xfe, 0xd5, 0xa0, 0x22, 0x59, 0xdf, 0xde, 0x78, 0xd2, 0xae, 0xfe, 0x72,
	0x42, 0x3d, 0x82, 0xf5, 0x38, 0xf1, 0x27, 0x7e, 0x64, 0x3b, 0x54, 0xe8, 0xd4, 0xb0, 0x6a, 0x12,
	0xe8, 0x51, 0xf4, 0x1c, 0xee, 0x39, 0xde, 0x15, 0x4e, 0x98, 0xff, 0x1b, 0xf6, 0x6c, 0x92, 0xe0,
	0xb1, 0xff, 0x5e, 0x7d, 0x1c, 0xf5, 0xcc, 0x30, 0x14, 0x38, 0x7a, 0x06, 0xfa, 0xb5, 0xcf, 0x2e,
	0xbd, 0xc4, 0xb9, 0x8e, 0x52, 0x5f, 0xa9, 0xd4, 0xe6, 0x0c, 0x97, 0xae, 0xc6, 0x6b, 0x80, 0x8c,
	0x08, 0x6a, 0xc0, 0xfa, 0x1b, 0xcb, 0x1c, 0x98, 0x27, 0x76, 0xef, 0x54, 0x2f, 0xf0, 0x66, 0x95,
	0xa7, 0x3c, 0x7c, 0xdb, 0xeb, 0x9f, 0xe9, 0x1a, 0x42, 0xd0, 0x94, 0x80, 0x79, 0xd2, 0x3f, 0x3e,
	0x3f, 0x38, 0x3c, 0xd0, 0x8b, 0xc6, 0xef, 0x1a, 0xd4, 0x44, 0xe5, 0x79, 0xfb, 0x7e, 0x60, 0x6f,
	0xcc, 0xfa, 0xad, 0x98, 0xeb, 0x37, 0xde, 0xa5, 0x7e, 0xe4, 0xc6, 0x21, 0x09, 0x30, 0x93, 0x2d,
	0x5c, 0xb3, 0x72, 0x08, 0x8f, 0x72, 0x2f, 0xa7, 0xd1, 0xbb, 0x56, 0x79, 0xbb, 0xb4, 0xb3, 0x61,
	0xc9, 0x8d, 0xf1, 0x77, 0x11, 0x20, 0x7b, 0xf9, 0xf8, 0x2b, 0x92, 0xd5, 0x55, 0x13, 0x6a, 0x66,
	0x00, 0x7a, 0x00, 0x55, 0x82, 0x71, 0x92, 0x29, 0x5d, 0xe1, 0xdb, 0x1e, 0x45, 0x0f, 0xa1, 0x16,
	0xc4, 0xae, 0x13, 0x70, 0x8b, 0xfa, 0x1a, 0x89, 0x7d, 0x8f, 0xf2, 0xb6, 0xf2, 0x23, 0x86, 0x93,
	0xb1, 0xe3, 0x62, 0xdb, 0x8f, 0x3c, 0xfc, 0x5e, 0xbd, 0x41, 0xcd, 0x19, 0x6c, 0x72, 0x94, 0xb7,
	0xa9, 0xe3, 0x79, 0x09, 0xa6, 0xd4, 0x1e, 0x3b, 0xa1, 0x1f, 0xdc, 0x88, 0xf6, 0x6b, 0x58, 0x0d,
	0x85, 0x1e, 0x09, 0x10, 0xbd, 0x54, 0x1c, 0x7c, 0xd9, 0x77, 0xf5, 0x6e, 0xab, 0xa3, 0x06, 0xb0,
	0x39, 0xec, 0x49, 0xcf, 0x8b, 0xc4, 0x21, 0x04, 0x27, 0x92, 0x9d, 0x49, 0xd0, 0x5e, 0xca, 0xce,
	0x27, 0xad, 0xea, 0xff, 0xc4, 0x48, 0xde, 0x26, 0x41, 0x5f, 0x43, 0x65, 0x4a, 0x3c, 0x87, 0xe1,
	0x56, 0x4d, 0x84, 0x34, 0x79, 0x55, 0xf8, 0x77, 0xea, 0x5c, 0xa0, 0x96, 0xb2, 0x76, 0xff, 0x29,
	0x41, 0x75, 0x5f, 0xd4, 0xcb, 0x43, 0xaf, 0x61, 0x23, 0x3f, 0x59, 0xd0, 0x93, 0xac, 0x92, 0x2b,
	0x26, 0x4e, 0x7b, 0x33, 0x33, 0xcb, 0xa9, 0x5f, 0x40, 0x47, 0xa0, 0x2f, 0x4e, 0x19, 0xb4, 0xe8,
	0xd6, 0xfe, 0x3c, 0x03, 0x56, 0x8e, 0x24, 0xa3, 0x80, 0x86, 0x72, 0x5a, 0x2d, 0xcd, 0xd1, 0xe5,
	0x64, 0x4f, 0xe7, 0x93, 0xad, 0x9e, 0xbc, 0x46, 0x01, 0x99, 0x50, 0xcf, 0x3d, 0x08, 0x3d, 0xce,
	0xc2, 0x96, 0xc7, 0x5b, 0xbb, 0x7d, 0x8b, 0x55, 0xa6, 0x7a, 0x05, 0x6b, 0xe2, 0xdb, 0x8d, 0x3e,
	0x5d, 0x3d, 0x57, 0xda, 0x5b, 0x4b, 0xb8, 0x08, 0xdc, 0xd1, 0xd0, 0x1e, 0x94, 0x06, 0x98, 0xa1,
	0xad, 0x55, 0xaf, 0x48, 0x1b, 0x2d, 0xa0, 0x22, 0xe8, 0x3b, 0x0d, 0x1d, 0x43, 0x73, 0xc0, 0xef,
	0x61, 0xb3, 0xfb, 0x4c, 0x9e, 0xfd, 0xf2, 0xdd, 0x28, 0xcf, 0x7e, 0xf1, 0x12, 0x64, 0x14, 0x46,
	0x15, 0x71, 0x55, 0xdb, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x93, 0x17, 0xe7, 0x6d, 0x0a,
	0x00, 0x00,
}
