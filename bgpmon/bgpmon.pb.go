// Code generated by protoc-gen-go.
// source: github.com/CSUNetSec/netsec-protobufs/bgpmon/bgpmon.proto
// DO NOT EDIT!

/*
Package bgpmon is a generated protocol buffer package.

It is generated from these files:
	github.com/CSUNetSec/netsec-protobufs/bgpmon/bgpmon.proto

It has these top-level messages:
	Empty
	GoBGPLinkModule
	PrefixByAsNumberModule
	PrefixHijackModule
	ListModulesReply
	RunModuleRequest
	RunModuleReply
	StartModuleRequest
	StartModuleReply
	StopModuleRequest
	CassandraSession
	CockroachSession
	FileSession
	CloseSessionRequest
	ListSessionsReply
	OpenSessionRequest
	OpenSessionReply
	WriteRequest
	ASNumberLocation
	BGPUpdateMessage
	BGPCapture
	IPAddressLocation
	IPPrefix
	Location
	Count
	BGPStats
	PrefixLocation
*/
package bgpmon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/CSUNetSec/netsec-protobufs/common"
import bgp "github.com/CSUNetSec/netsec-protobufs/protocol/bgp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Module Messages
type ModuleType int32

const (
	ModuleType_GOBGP_LINK          ModuleType = 0
	ModuleType_PREFIX_BY_AS_NUMBER ModuleType = 1
	ModuleType_PREFIX_HIJACK       ModuleType = 2
)

var ModuleType_name = map[int32]string{
	0: "GOBGP_LINK",
	1: "PREFIX_BY_AS_NUMBER",
	2: "PREFIX_HIJACK",
}
var ModuleType_value = map[string]int32{
	"GOBGP_LINK":          0,
	"PREFIX_BY_AS_NUMBER": 1,
	"PREFIX_HIJACK":       2,
}

func (x ModuleType) String() string {
	return proto.EnumName(ModuleType_name, int32(x))
}
func (ModuleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//
// Session Messages
type SessionType int32

const (
	SessionType_CASSANDRA SessionType = 0
	SessionType_FILE      SessionType = 1
	SessionType_COCKROACH SessionType = 2
)

var SessionType_name = map[int32]string{
	0: "CASSANDRA",
	1: "FILE",
	2: "COCKROACH",
}
var SessionType_value = map[string]int32{
	"CASSANDRA": 0,
	"FILE":      1,
	"COCKROACH": 2,
}

func (x SessionType) String() string {
	return proto.EnumName(SessionType_name, int32(x))
}
func (SessionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type WriteRequest_Type int32

const (
	WriteRequest_AS_NUMBER_LOCATION  WriteRequest_Type = 0
	WriteRequest_BGP_UPDATE          WriteRequest_Type = 1
	WriteRequest_IP_ADDRESS_LOCATION WriteRequest_Type = 2
	WriteRequest_PREFIX_LOCATION     WriteRequest_Type = 3
	WriteRequest_BGP_CAPTURE         WriteRequest_Type = 4
	WriteRequest_BGP_STATS           WriteRequest_Type = 5
)

var WriteRequest_Type_name = map[int32]string{
	0: "AS_NUMBER_LOCATION",
	1: "BGP_UPDATE",
	2: "IP_ADDRESS_LOCATION",
	3: "PREFIX_LOCATION",
	4: "BGP_CAPTURE",
	5: "BGP_STATS",
}
var WriteRequest_Type_value = map[string]int32{
	"AS_NUMBER_LOCATION":  0,
	"BGP_UPDATE":          1,
	"IP_ADDRESS_LOCATION": 2,
	"PREFIX_LOCATION":     3,
	"BGP_CAPTURE":         4,
	"BGP_STATS":           5,
}

func (x WriteRequest_Type) String() string {
	return proto.EnumName(WriteRequest_Type_name, int32(x))
}
func (WriteRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GoBGPLinkModule struct {
	Address      string   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	OutSessionId []string `protobuf:"bytes,2,rep,name=out_session_id,json=outSessionId" json:"out_session_id,omitempty"`
}

func (m *GoBGPLinkModule) Reset()                    { *m = GoBGPLinkModule{} }
func (m *GoBGPLinkModule) String() string            { return proto.CompactTextString(m) }
func (*GoBGPLinkModule) ProtoMessage()               {}
func (*GoBGPLinkModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GoBGPLinkModule) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GoBGPLinkModule) GetOutSessionId() []string {
	if m != nil {
		return m.OutSessionId
	}
	return nil
}

type PrefixByAsNumberModule struct {
	StartTime   int64    `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime     int64    `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	InSessionId []string `protobuf:"bytes,3,rep,name=in_session_id,json=inSessionId" json:"in_session_id,omitempty"`
}

func (m *PrefixByAsNumberModule) Reset()                    { *m = PrefixByAsNumberModule{} }
func (m *PrefixByAsNumberModule) String() string            { return proto.CompactTextString(m) }
func (*PrefixByAsNumberModule) ProtoMessage()               {}
func (*PrefixByAsNumberModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PrefixByAsNumberModule) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PrefixByAsNumberModule) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *PrefixByAsNumberModule) GetInSessionId() []string {
	if m != nil {
		return m.InSessionId
	}
	return nil
}

type PrefixHijackModule struct {
	PeriodicSeconds           int32    `protobuf:"varint,1,opt,name=periodic_seconds,json=periodicSeconds" json:"periodic_seconds,omitempty"`
	TimeoutSeconds            int32    `protobuf:"varint,2,opt,name=timeout_seconds,json=timeoutSeconds" json:"timeout_seconds,omitempty"`
	InSessionId               []string `protobuf:"bytes,3,rep,name=in_session_id,json=inSessionId" json:"in_session_id,omitempty"`
	StartTimeSecondsFromEpoch int64    `protobuf:"varint,4,opt,name=start_time_seconds_from_epoch,json=startTimeSecondsFromEpoch" json:"start_time_seconds_from_epoch,omitempty"`
	LookbackDurationSeconds   int64    `protobuf:"varint,5,opt,name=lookback_duration_seconds,json=lookbackDurationSeconds" json:"lookback_duration_seconds,omitempty"`
}

func (m *PrefixHijackModule) Reset()                    { *m = PrefixHijackModule{} }
func (m *PrefixHijackModule) String() string            { return proto.CompactTextString(m) }
func (*PrefixHijackModule) ProtoMessage()               {}
func (*PrefixHijackModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PrefixHijackModule) GetPeriodicSeconds() int32 {
	if m != nil {
		return m.PeriodicSeconds
	}
	return 0
}

func (m *PrefixHijackModule) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *PrefixHijackModule) GetInSessionId() []string {
	if m != nil {
		return m.InSessionId
	}
	return nil
}

func (m *PrefixHijackModule) GetStartTimeSecondsFromEpoch() int64 {
	if m != nil {
		return m.StartTimeSecondsFromEpoch
	}
	return 0
}

func (m *PrefixHijackModule) GetLookbackDurationSeconds() int64 {
	if m != nil {
		return m.LookbackDurationSeconds
	}
	return 0
}

//
// Module Command Messages
type ListModulesReply struct {
	ModuleId []string `protobuf:"bytes,1,rep,name=module_id,json=moduleId" json:"module_id,omitempty"`
}

func (m *ListModulesReply) Reset()                    { *m = ListModulesReply{} }
func (m *ListModulesReply) String() string            { return proto.CompactTextString(m) }
func (*ListModulesReply) ProtoMessage()               {}
func (*ListModulesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListModulesReply) GetModuleId() []string {
	if m != nil {
		return m.ModuleId
	}
	return nil
}

type RunModuleRequest struct {
	Type                   ModuleType              `protobuf:"varint,1,opt,name=type,enum=bgpmon.ModuleType" json:"type,omitempty"`
	PrefixByAsNumberModule *PrefixByAsNumberModule `protobuf:"bytes,2,opt,name=prefix_by_as_number_module,json=prefixByAsNumberModule" json:"prefix_by_as_number_module,omitempty"`
	PrefixHijackModule     *PrefixHijackModule     `protobuf:"bytes,3,opt,name=prefix_hijack_module,json=prefixHijackModule" json:"prefix_hijack_module,omitempty"`
}

func (m *RunModuleRequest) Reset()                    { *m = RunModuleRequest{} }
func (m *RunModuleRequest) String() string            { return proto.CompactTextString(m) }
func (*RunModuleRequest) ProtoMessage()               {}
func (*RunModuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RunModuleRequest) GetType() ModuleType {
	if m != nil {
		return m.Type
	}
	return ModuleType_GOBGP_LINK
}

func (m *RunModuleRequest) GetPrefixByAsNumberModule() *PrefixByAsNumberModule {
	if m != nil {
		return m.PrefixByAsNumberModule
	}
	return nil
}

func (m *RunModuleRequest) GetPrefixHijackModule() *PrefixHijackModule {
	if m != nil {
		return m.PrefixHijackModule
	}
	return nil
}

type RunModuleReply struct {
	ModuleMessage string `protobuf:"bytes,3,opt,name=module_message,json=moduleMessage" json:"module_message,omitempty"`
}

func (m *RunModuleReply) Reset()                    { *m = RunModuleReply{} }
func (m *RunModuleReply) String() string            { return proto.CompactTextString(m) }
func (*RunModuleReply) ProtoMessage()               {}
func (*RunModuleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RunModuleReply) GetModuleMessage() string {
	if m != nil {
		return m.ModuleMessage
	}
	return ""
}

type StartModuleRequest struct {
	Type               ModuleType          `protobuf:"varint,1,opt,name=type,enum=bgpmon.ModuleType" json:"type,omitempty"`
	ModuleId           string              `protobuf:"bytes,2,opt,name=module_id,json=moduleId" json:"module_id,omitempty"`
	GobgpLinkModule    *GoBGPLinkModule    `protobuf:"bytes,3,opt,name=gobgp_link_module,json=gobgpLinkModule" json:"gobgp_link_module,omitempty"`
	PrefixHijackModule *PrefixHijackModule `protobuf:"bytes,4,opt,name=prefix_hijack_module,json=prefixHijackModule" json:"prefix_hijack_module,omitempty"`
}

func (m *StartModuleRequest) Reset()                    { *m = StartModuleRequest{} }
func (m *StartModuleRequest) String() string            { return proto.CompactTextString(m) }
func (*StartModuleRequest) ProtoMessage()               {}
func (*StartModuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StartModuleRequest) GetType() ModuleType {
	if m != nil {
		return m.Type
	}
	return ModuleType_GOBGP_LINK
}

func (m *StartModuleRequest) GetModuleId() string {
	if m != nil {
		return m.ModuleId
	}
	return ""
}

func (m *StartModuleRequest) GetGobgpLinkModule() *GoBGPLinkModule {
	if m != nil {
		return m.GobgpLinkModule
	}
	return nil
}

func (m *StartModuleRequest) GetPrefixHijackModule() *PrefixHijackModule {
	if m != nil {
		return m.PrefixHijackModule
	}
	return nil
}

type StartModuleReply struct {
	ModuleId string `protobuf:"bytes,3,opt,name=module_id,json=moduleId" json:"module_id,omitempty"`
}

func (m *StartModuleReply) Reset()                    { *m = StartModuleReply{} }
func (m *StartModuleReply) String() string            { return proto.CompactTextString(m) }
func (*StartModuleReply) ProtoMessage()               {}
func (*StartModuleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StartModuleReply) GetModuleId() string {
	if m != nil {
		return m.ModuleId
	}
	return ""
}

type StopModuleRequest struct {
	ModuleId string `protobuf:"bytes,1,opt,name=module_id,json=moduleId" json:"module_id,omitempty"`
}

func (m *StopModuleRequest) Reset()                    { *m = StopModuleRequest{} }
func (m *StopModuleRequest) String() string            { return proto.CompactTextString(m) }
func (*StopModuleRequest) ProtoMessage()               {}
func (*StopModuleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StopModuleRequest) GetModuleId() string {
	if m != nil {
		return m.ModuleId
	}
	return ""
}

type CassandraSession struct {
	Username    string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password    string   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Hosts       []string `protobuf:"bytes,3,rep,name=hosts" json:"hosts,omitempty"`
	WorkerCount uint32   `protobuf:"varint,4,opt,name=workerCount" json:"workerCount,omitempty"`
}

func (m *CassandraSession) Reset()                    { *m = CassandraSession{} }
func (m *CassandraSession) String() string            { return proto.CompactTextString(m) }
func (*CassandraSession) ProtoMessage()               {}
func (*CassandraSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CassandraSession) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CassandraSession) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CassandraSession) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *CassandraSession) GetWorkerCount() uint32 {
	if m != nil {
		return m.WorkerCount
	}
	return 0
}

type CockroachSession struct {
	Username    string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password    string   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Hosts       []string `protobuf:"bytes,3,rep,name=hosts" json:"hosts,omitempty"`
	Port        uint32   `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	WorkerCount uint32   `protobuf:"varint,5,opt,name=workerCount" json:"workerCount,omitempty"`
	Certdir     string   `protobuf:"bytes,6,opt,name=certdir" json:"certdir,omitempty"`
}

func (m *CockroachSession) Reset()                    { *m = CockroachSession{} }
func (m *CockroachSession) String() string            { return proto.CompactTextString(m) }
func (*CockroachSession) ProtoMessage()               {}
func (*CockroachSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CockroachSession) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CockroachSession) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CockroachSession) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *CockroachSession) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CockroachSession) GetWorkerCount() uint32 {
	if m != nil {
		return m.WorkerCount
	}
	return 0
}

func (m *CockroachSession) GetCertdir() string {
	if m != nil {
		return m.Certdir
	}
	return ""
}

type FileSession struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *FileSession) Reset()                    { *m = FileSession{} }
func (m *FileSession) String() string            { return proto.CompactTextString(m) }
func (*FileSession) ProtoMessage()               {}
func (*FileSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FileSession) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

//
// Session Command Messages
type CloseSessionRequest struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *CloseSessionRequest) Reset()                    { *m = CloseSessionRequest{} }
func (m *CloseSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionRequest) ProtoMessage()               {}
func (*CloseSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CloseSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type ListSessionsReply struct {
	SessionId []string `protobuf:"bytes,1,rep,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *ListSessionsReply) Reset()                    { *m = ListSessionsReply{} }
func (m *ListSessionsReply) String() string            { return proto.CompactTextString(m) }
func (*ListSessionsReply) ProtoMessage()               {}
func (*ListSessionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListSessionsReply) GetSessionId() []string {
	if m != nil {
		return m.SessionId
	}
	return nil
}

type OpenSessionRequest struct {
	Type             SessionType       `protobuf:"varint,1,opt,name=type,enum=bgpmon.SessionType" json:"type,omitempty"`
	SessionId        string            `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	CassandraSession *CassandraSession `protobuf:"bytes,3,opt,name=cassandra_session,json=cassandraSession" json:"cassandra_session,omitempty"`
	FileSession      *FileSession      `protobuf:"bytes,4,opt,name=file_session,json=fileSession" json:"file_session,omitempty"`
	CockroachSession *CockroachSession `protobuf:"bytes,5,opt,name=cockroach_session,json=cockroachSession" json:"cockroach_session,omitempty"`
}

func (m *OpenSessionRequest) Reset()                    { *m = OpenSessionRequest{} }
func (m *OpenSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionRequest) ProtoMessage()               {}
func (*OpenSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *OpenSessionRequest) GetType() SessionType {
	if m != nil {
		return m.Type
	}
	return SessionType_CASSANDRA
}

func (m *OpenSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *OpenSessionRequest) GetCassandraSession() *CassandraSession {
	if m != nil {
		return m.CassandraSession
	}
	return nil
}

func (m *OpenSessionRequest) GetFileSession() *FileSession {
	if m != nil {
		return m.FileSession
	}
	return nil
}

func (m *OpenSessionRequest) GetCockroachSession() *CockroachSession {
	if m != nil {
		return m.CockroachSession
	}
	return nil
}

type OpenSessionReply struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (m *OpenSessionReply) Reset()                    { *m = OpenSessionReply{} }
func (m *OpenSessionReply) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionReply) ProtoMessage()               {}
func (*OpenSessionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OpenSessionReply) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

//
// Write Messages
type WriteRequest struct {
	Type              WriteRequest_Type  `protobuf:"varint,1,opt,name=type,enum=bgpmon.WriteRequest_Type" json:"type,omitempty"`
	SessionId         string             `protobuf:"bytes,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	AsNumberLocation  *ASNumberLocation  `protobuf:"bytes,3,opt,name=as_number_location,json=asNumberLocation" json:"as_number_location,omitempty"`
	BgpUpdateMessage  *BGPUpdateMessage  `protobuf:"bytes,4,opt,name=bgp_update_message,json=bgpUpdateMessage" json:"bgp_update_message,omitempty"`
	IpAddressLocation *IPAddressLocation `protobuf:"bytes,5,opt,name=ip_address_location,json=ipAddressLocation" json:"ip_address_location,omitempty"`
	PrefixLocation    *PrefixLocation    `protobuf:"bytes,6,opt,name=prefix_location,json=prefixLocation" json:"prefix_location,omitempty"`
	BgpCapture        *BGPCapture        `protobuf:"bytes,7,opt,name=bgp_capture,json=bgpCapture" json:"bgp_capture,omitempty"`
	BgpStats          *BGPStats          `protobuf:"bytes,8,opt,name=bgp_stats,json=bgpStats" json:"bgp_stats,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *WriteRequest) GetType() WriteRequest_Type {
	if m != nil {
		return m.Type
	}
	return WriteRequest_AS_NUMBER_LOCATION
}

func (m *WriteRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *WriteRequest) GetAsNumberLocation() *ASNumberLocation {
	if m != nil {
		return m.AsNumberLocation
	}
	return nil
}

func (m *WriteRequest) GetBgpUpdateMessage() *BGPUpdateMessage {
	if m != nil {
		return m.BgpUpdateMessage
	}
	return nil
}

func (m *WriteRequest) GetIpAddressLocation() *IPAddressLocation {
	if m != nil {
		return m.IpAddressLocation
	}
	return nil
}

func (m *WriteRequest) GetPrefixLocation() *PrefixLocation {
	if m != nil {
		return m.PrefixLocation
	}
	return nil
}

func (m *WriteRequest) GetBgpCapture() *BGPCapture {
	if m != nil {
		return m.BgpCapture
	}
	return nil
}

func (m *WriteRequest) GetBgpStats() *BGPStats {
	if m != nil {
		return m.BgpStats
	}
	return nil
}

type ASNumberLocation struct {
	AsNumber    uint32    `protobuf:"varint,1,opt,name=as_number,json=asNumber" json:"as_number,omitempty"`
	MeasureDate string    `protobuf:"bytes,2,opt,name=measure_date,json=measureDate" json:"measure_date,omitempty"`
	Location    *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Source      string    `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
}

func (m *ASNumberLocation) Reset()                    { *m = ASNumberLocation{} }
func (m *ASNumberLocation) String() string            { return proto.CompactTextString(m) }
func (*ASNumberLocation) ProtoMessage()               {}
func (*ASNumberLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ASNumberLocation) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *ASNumberLocation) GetMeasureDate() string {
	if m != nil {
		return m.MeasureDate
	}
	return ""
}

func (m *ASNumberLocation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ASNumberLocation) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// XXX phase this out
type BGPUpdateMessage struct {
	Timestamp           int64       `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	CollectorIpAddress  string      `protobuf:"bytes,2,opt,name=collector_ip_address,json=collectorIpAddress" json:"collector_ip_address,omitempty"`
	CollectorMacAddress string      `protobuf:"bytes,3,opt,name=collector_mac_address,json=collectorMacAddress" json:"collector_mac_address,omitempty"`
	CollectorPort       uint32      `protobuf:"varint,4,opt,name=collector_port,json=collectorPort" json:"collector_port,omitempty"`
	PeerIpAddress       string      `protobuf:"bytes,5,opt,name=peer_ip_address,json=peerIpAddress" json:"peer_ip_address,omitempty"`
	AsPath              []uint32    `protobuf:"varint,6,rep,packed,name=as_path,json=asPath" json:"as_path,omitempty"`
	NextHop             string      `protobuf:"bytes,9,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	AdvertisedPrefixes  []*IPPrefix `protobuf:"bytes,7,rep,name=advertised_prefixes,json=advertisedPrefixes" json:"advertised_prefixes,omitempty"`
	WithdrawnPrefixes   []*IPPrefix `protobuf:"bytes,8,rep,name=withdrawn_prefixes,json=withdrawnPrefixes" json:"withdrawn_prefixes,omitempty"`
}

func (m *BGPUpdateMessage) Reset()                    { *m = BGPUpdateMessage{} }
func (m *BGPUpdateMessage) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdateMessage) ProtoMessage()               {}
func (*BGPUpdateMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BGPUpdateMessage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BGPUpdateMessage) GetCollectorIpAddress() string {
	if m != nil {
		return m.CollectorIpAddress
	}
	return ""
}

func (m *BGPUpdateMessage) GetCollectorMacAddress() string {
	if m != nil {
		return m.CollectorMacAddress
	}
	return ""
}

func (m *BGPUpdateMessage) GetCollectorPort() uint32 {
	if m != nil {
		return m.CollectorPort
	}
	return 0
}

func (m *BGPUpdateMessage) GetPeerIpAddress() string {
	if m != nil {
		return m.PeerIpAddress
	}
	return ""
}

func (m *BGPUpdateMessage) GetAsPath() []uint32 {
	if m != nil {
		return m.AsPath
	}
	return nil
}

func (m *BGPUpdateMessage) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *BGPUpdateMessage) GetAdvertisedPrefixes() []*IPPrefix {
	if m != nil {
		return m.AdvertisedPrefixes
	}
	return nil
}

func (m *BGPUpdateMessage) GetWithdrawnPrefixes() []*IPPrefix {
	if m != nil {
		return m.WithdrawnPrefixes
	}
	return nil
}

// a message of Capture type to facilitate the represtation of a
// BGP Update from multuple sources (live/mrt etc) to bgpmon
// and other systems. the inner actual update is defined in protocol/bgp
type BGPCapture struct {
	Timestamp      uint32                   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	PeerAs         uint32                   `protobuf:"varint,2,opt,name=peer_as,json=peerAs" json:"peer_as,omitempty"`
	LocalAs        uint32                   `protobuf:"varint,3,opt,name=local_as,json=localAs" json:"local_as,omitempty"`
	InterfaceIndex uint32                   `protobuf:"varint,4,opt,name=interface_index,json=interfaceIndex" json:"interface_index,omitempty"`
	AddressFamily  uint32                   `protobuf:"varint,5,opt,name=address_family,json=addressFamily" json:"address_family,omitempty"`
	PeerIp         *common.IPAddressWrapper `protobuf:"bytes,6,opt,name=peer_ip,json=peerIp" json:"peer_ip,omitempty"`
	LocalIp        *common.IPAddressWrapper `protobuf:"bytes,7,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	Update         *bgp.BGPUpdate           `protobuf:"bytes,8,opt,name=update" json:"update,omitempty"`
}

func (m *BGPCapture) Reset()                    { *m = BGPCapture{} }
func (m *BGPCapture) String() string            { return proto.CompactTextString(m) }
func (*BGPCapture) ProtoMessage()               {}
func (*BGPCapture) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BGPCapture) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BGPCapture) GetPeerAs() uint32 {
	if m != nil {
		return m.PeerAs
	}
	return 0
}

func (m *BGPCapture) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BGPCapture) GetInterfaceIndex() uint32 {
	if m != nil {
		return m.InterfaceIndex
	}
	return 0
}

func (m *BGPCapture) GetAddressFamily() uint32 {
	if m != nil {
		return m.AddressFamily
	}
	return 0
}

func (m *BGPCapture) GetPeerIp() *common.IPAddressWrapper {
	if m != nil {
		return m.PeerIp
	}
	return nil
}

func (m *BGPCapture) GetLocalIp() *common.IPAddressWrapper {
	if m != nil {
		return m.LocalIp
	}
	return nil
}

func (m *BGPCapture) GetUpdate() *bgp.BGPUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type IPAddressLocation struct {
	IpAddress   string    `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	MeasureDate string    `protobuf:"bytes,2,opt,name=measure_date,json=measureDate" json:"measure_date,omitempty"`
	Location    *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Source      string    `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
}

func (m *IPAddressLocation) Reset()                    { *m = IPAddressLocation{} }
func (m *IPAddressLocation) String() string            { return proto.CompactTextString(m) }
func (*IPAddressLocation) ProtoMessage()               {}
func (*IPAddressLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *IPAddressLocation) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *IPAddressLocation) GetMeasureDate() string {
	if m != nil {
		return m.MeasureDate
	}
	return ""
}

func (m *IPAddressLocation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *IPAddressLocation) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type IPPrefix struct {
	PrefixIpAddress string `protobuf:"bytes,1,opt,name=prefix_ip_address,json=prefixIpAddress" json:"prefix_ip_address,omitempty"`
	PrefixMask      uint32 `protobuf:"varint,2,opt,name=prefix_mask,json=prefixMask" json:"prefix_mask,omitempty"`
}

func (m *IPPrefix) Reset()                    { *m = IPPrefix{} }
func (m *IPPrefix) String() string            { return proto.CompactTextString(m) }
func (*IPPrefix) ProtoMessage()               {}
func (*IPPrefix) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *IPPrefix) GetPrefixIpAddress() string {
	if m != nil {
		return m.PrefixIpAddress
	}
	return ""
}

func (m *IPPrefix) GetPrefixMask() uint32 {
	if m != nil {
		return m.PrefixMask
	}
	return 0
}

type Location struct {
	CountryCode string  `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	StateCode   string  `protobuf:"bytes,2,opt,name=state_code,json=stateCode" json:"state_code,omitempty"`
	City        string  `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	Latitude    float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	Longitude   float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Location) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Location) GetStateCode() string {
	if m != nil {
		return m.StateCode
	}
	return ""
}

func (m *Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Count struct {
	Count map[string]uint32 `protobuf:"bytes,1,rep,name=count" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Count) GetCount() map[string]uint32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type BGPStats struct {
	CollectorIp          string            `protobuf:"bytes,1,opt,name=collector_ip,json=collectorIp" json:"collector_ip,omitempty"`
	TimeStartSecEpoch    uint64            `protobuf:"varint,2,opt,name=timeStartSecEpoch" json:"timeStartSecEpoch,omitempty"`
	DurationSec          uint32            `protobuf:"varint,3,opt,name=durationSec" json:"durationSec,omitempty"`
	MsgCounts            *Count            `protobuf:"bytes,4,opt,name=msgCounts" json:"msgCounts,omitempty"`
	DestAsToPrefixCounts map[string]*Count `protobuf:"bytes,5,rep,name=destAsToPrefixCounts" json:"destAsToPrefixCounts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DestAsToASPCounts    map[string]*Count `protobuf:"bytes,6,rep,name=destAsToASPCounts" json:"destAsToASPCounts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BGPStats) Reset()                    { *m = BGPStats{} }
func (m *BGPStats) String() string            { return proto.CompactTextString(m) }
func (*BGPStats) ProtoMessage()               {}
func (*BGPStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BGPStats) GetCollectorIp() string {
	if m != nil {
		return m.CollectorIp
	}
	return ""
}

func (m *BGPStats) GetTimeStartSecEpoch() uint64 {
	if m != nil {
		return m.TimeStartSecEpoch
	}
	return 0
}

func (m *BGPStats) GetDurationSec() uint32 {
	if m != nil {
		return m.DurationSec
	}
	return 0
}

func (m *BGPStats) GetMsgCounts() *Count {
	if m != nil {
		return m.MsgCounts
	}
	return nil
}

func (m *BGPStats) GetDestAsToPrefixCounts() map[string]*Count {
	if m != nil {
		return m.DestAsToPrefixCounts
	}
	return nil
}

func (m *BGPStats) GetDestAsToASPCounts() map[string]*Count {
	if m != nil {
		return m.DestAsToASPCounts
	}
	return nil
}

type PrefixLocation struct {
	Prefix      *IPPrefix `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	MeasureDate string    `protobuf:"bytes,2,opt,name=measure_date,json=measureDate" json:"measure_date,omitempty"`
	Location    *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Source      string    `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
}

func (m *PrefixLocation) Reset()                    { *m = PrefixLocation{} }
func (m *PrefixLocation) String() string            { return proto.CompactTextString(m) }
func (*PrefixLocation) ProtoMessage()               {}
func (*PrefixLocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PrefixLocation) GetPrefix() *IPPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *PrefixLocation) GetMeasureDate() string {
	if m != nil {
		return m.MeasureDate
	}
	return ""
}

func (m *PrefixLocation) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *PrefixLocation) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "bgpmon.Empty")
	proto.RegisterType((*GoBGPLinkModule)(nil), "bgpmon.GoBGPLinkModule")
	proto.RegisterType((*PrefixByAsNumberModule)(nil), "bgpmon.PrefixByAsNumberModule")
	proto.RegisterType((*PrefixHijackModule)(nil), "bgpmon.PrefixHijackModule")
	proto.RegisterType((*ListModulesReply)(nil), "bgpmon.ListModulesReply")
	proto.RegisterType((*RunModuleRequest)(nil), "bgpmon.RunModuleRequest")
	proto.RegisterType((*RunModuleReply)(nil), "bgpmon.RunModuleReply")
	proto.RegisterType((*StartModuleRequest)(nil), "bgpmon.StartModuleRequest")
	proto.RegisterType((*StartModuleReply)(nil), "bgpmon.StartModuleReply")
	proto.RegisterType((*StopModuleRequest)(nil), "bgpmon.StopModuleRequest")
	proto.RegisterType((*CassandraSession)(nil), "bgpmon.CassandraSession")
	proto.RegisterType((*CockroachSession)(nil), "bgpmon.CockroachSession")
	proto.RegisterType((*FileSession)(nil), "bgpmon.FileSession")
	proto.RegisterType((*CloseSessionRequest)(nil), "bgpmon.CloseSessionRequest")
	proto.RegisterType((*ListSessionsReply)(nil), "bgpmon.ListSessionsReply")
	proto.RegisterType((*OpenSessionRequest)(nil), "bgpmon.OpenSessionRequest")
	proto.RegisterType((*OpenSessionReply)(nil), "bgpmon.OpenSessionReply")
	proto.RegisterType((*WriteRequest)(nil), "bgpmon.WriteRequest")
	proto.RegisterType((*ASNumberLocation)(nil), "bgpmon.ASNumberLocation")
	proto.RegisterType((*BGPUpdateMessage)(nil), "bgpmon.BGPUpdateMessage")
	proto.RegisterType((*BGPCapture)(nil), "bgpmon.BGPCapture")
	proto.RegisterType((*IPAddressLocation)(nil), "bgpmon.IPAddressLocation")
	proto.RegisterType((*IPPrefix)(nil), "bgpmon.IPPrefix")
	proto.RegisterType((*Location)(nil), "bgpmon.Location")
	proto.RegisterType((*Count)(nil), "bgpmon.Count")
	proto.RegisterType((*BGPStats)(nil), "bgpmon.BGPStats")
	proto.RegisterType((*PrefixLocation)(nil), "bgpmon.PrefixLocation")
	proto.RegisterEnum("bgpmon.ModuleType", ModuleType_name, ModuleType_value)
	proto.RegisterEnum("bgpmon.SessionType", SessionType_name, SessionType_value)
	proto.RegisterEnum("bgpmon.WriteRequest_Type", WriteRequest_Type_name, WriteRequest_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bgpmond service

type BgpmondClient interface {
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	ListModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListModulesReply, error)
	ListSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSessionsReply, error)
	RunModule(ctx context.Context, in *RunModuleRequest, opts ...grpc.CallOption) (*RunModuleReply, error)
	StartModule(ctx context.Context, in *StartModuleRequest, opts ...grpc.CallOption) (*StartModuleReply, error)
	StopModule(ctx context.Context, in *StopModuleRequest, opts ...grpc.CallOption) (*Empty, error)
	OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Bgpmond_WriteClient, error)
}

type bgpmondClient struct {
	cc *grpc.ClientConn
}

func NewBgpmondClient(cc *grpc.ClientConn) BgpmondClient {
	return &bgpmondClient{cc}
}

func (c *bgpmondClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/bgpmon.Bgpmond/CloseSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListModules(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListModulesReply, error) {
	out := new(ListModulesReply)
	err := grpc.Invoke(ctx, "/bgpmon.Bgpmond/ListModules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) ListSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSessionsReply, error) {
	out := new(ListSessionsReply)
	err := grpc.Invoke(ctx, "/bgpmon.Bgpmond/ListSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) RunModule(ctx context.Context, in *RunModuleRequest, opts ...grpc.CallOption) (*RunModuleReply, error) {
	out := new(RunModuleReply)
	err := grpc.Invoke(ctx, "/bgpmon.Bgpmond/RunModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) StartModule(ctx context.Context, in *StartModuleRequest, opts ...grpc.CallOption) (*StartModuleReply, error) {
	out := new(StartModuleReply)
	err := grpc.Invoke(ctx, "/bgpmon.Bgpmond/StartModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) StopModule(ctx context.Context, in *StopModuleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/bgpmon.Bgpmond/StopModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...grpc.CallOption) (*OpenSessionReply, error) {
	out := new(OpenSessionReply)
	err := grpc.Invoke(ctx, "/bgpmon.Bgpmond/OpenSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpmondClient) Write(ctx context.Context, opts ...grpc.CallOption) (Bgpmond_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bgpmond_serviceDesc.Streams[0], c.cc, "/bgpmon.Bgpmond/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpmondWriteClient{stream}
	return x, nil
}

type Bgpmond_WriteClient interface {
	Send(*WriteRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type bgpmondWriteClient struct {
	grpc.ClientStream
}

func (x *bgpmondWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bgpmondWriteClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Bgpmond service

type BgpmondServer interface {
	CloseSession(context.Context, *CloseSessionRequest) (*Empty, error)
	ListModules(context.Context, *Empty) (*ListModulesReply, error)
	ListSessions(context.Context, *Empty) (*ListSessionsReply, error)
	RunModule(context.Context, *RunModuleRequest) (*RunModuleReply, error)
	StartModule(context.Context, *StartModuleRequest) (*StartModuleReply, error)
	StopModule(context.Context, *StopModuleRequest) (*Empty, error)
	OpenSession(context.Context, *OpenSessionRequest) (*OpenSessionReply, error)
	Write(Bgpmond_WriteServer) error
}

func RegisterBgpmondServer(s *grpc.Server, srv BgpmondServer) {
	s.RegisterService(&_Bgpmond_serviceDesc, srv)
}

func _Bgpmond_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmon.Bgpmond/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmon.Bgpmond/ListModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListModules(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmon.Bgpmond/ListSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).ListSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_RunModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).RunModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmon.Bgpmond/RunModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).RunModule(ctx, req.(*RunModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_StartModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).StartModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmon.Bgpmond/StartModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).StartModule(ctx, req.(*StartModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_StopModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).StopModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmon.Bgpmond/StopModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).StopModule(ctx, req.(*StopModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpmondServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpmon.Bgpmond/OpenSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpmondServer).OpenSession(ctx, req.(*OpenSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bgpmond_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BgpmondServer).Write(&bgpmondWriteServer{stream})
}

type Bgpmond_WriteServer interface {
	SendAndClose(*Empty) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type bgpmondWriteServer struct {
	grpc.ServerStream
}

func (x *bgpmondWriteServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bgpmondWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Bgpmond_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bgpmon.Bgpmond",
	HandlerType: (*BgpmondServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseSession",
			Handler:    _Bgpmond_CloseSession_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _Bgpmond_ListModules_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _Bgpmond_ListSessions_Handler,
		},
		{
			MethodName: "RunModule",
			Handler:    _Bgpmond_RunModule_Handler,
		},
		{
			MethodName: "StartModule",
			Handler:    _Bgpmond_StartModule_Handler,
		},
		{
			MethodName: "StopModule",
			Handler:    _Bgpmond_StopModule_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _Bgpmond_OpenSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Bgpmond_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/CSUNetSec/netsec-protobufs/bgpmon/bgpmon.proto",
}

func init() {
	proto.RegisterFile("github.com/CSUNetSec/netsec-protobufs/bgpmon/bgpmon.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 2024 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x73, 0x23, 0x49,
	0x11, 0xb6, 0x9e, 0x96, 0x52, 0x96, 0xdc, 0x2a, 0x1b, 0x5b, 0xd6, 0xb2, 0xe0, 0x6d, 0xd8, 0x1d,
	0xef, 0xb0, 0x63, 0xcf, 0x7a, 0x78, 0x0c, 0x13, 0x1b, 0x31, 0xc8, 0xb2, 0x6c, 0x8b, 0xf1, 0x43,
	0xb4, 0x6c, 0x06, 0x38, 0xd0, 0xd1, 0xea, 0x2e, 0xcb, 0x8d, 0xa5, 0xae, 0xde, 0xae, 0xd2, 0xcc,
	0x28, 0x82, 0x13, 0x47, 0x0e, 0x9c, 0x09, 0x08, 0x2e, 0xf0, 0x07, 0xf8, 0x05, 0xfc, 0x10, 0xce,
	0x1c, 0xf9, 0x01, 0x1c, 0x89, 0x7a, 0xf4, 0x53, 0x72, 0xc4, 0xc4, 0x12, 0xec, 0x61, 0xc6, 0xaa,
	0x7c, 0x55, 0xd6, 0x97, 0x59, 0x59, 0x99, 0x0d, 0x3f, 0x1e, 0xbb, 0xec, 0x6e, 0x36, 0xda, 0xb7,
	0xc9, 0xf4, 0xa0, 0x3b, 0xbc, 0xb9, 0xc4, 0x6c, 0x88, 0xed, 0x03, 0x0f, 0x33, 0x8a, 0xed, 0x27,
	0x7e, 0x40, 0x18, 0x19, 0xcd, 0x6e, 0xe9, 0xc1, 0x68, 0xec, 0x4f, 0x89, 0xa7, 0xfe, 0xec, 0x0b,
	0x3a, 0x2a, 0xcb, 0x55, 0xfb, 0x3d, 0x4d, 0xd8, 0x64, 0xca, 0x4d, 0xc8, 0x3f, 0xd2, 0x44, 0xfb,
	0x8b, 0xf7, 0x53, 0x15, 0xbf, 0x6c, 0x32, 0xe1, 0xfb, 0xf3, 0x7f, 0x52, 0x5b, 0x5f, 0x85, 0x52,
	0x6f, 0xea, 0xb3, 0xb9, 0xfe, 0x33, 0x58, 0x3f, 0x25, 0x47, 0xa7, 0x83, 0x73, 0xd7, 0xbb, 0xbf,
	0x20, 0xce, 0x6c, 0x82, 0x51, 0x0b, 0x56, 0x2d, 0xc7, 0x09, 0x30, 0xa5, 0xad, 0xdc, 0x6e, 0x6e,
	0xaf, 0x6a, 0x84, 0x4b, 0xf4, 0x5d, 0x68, 0x90, 0x19, 0x33, 0x29, 0xa6, 0xd4, 0x25, 0x9e, 0xe9,
	0x3a, 0xad, 0xfc, 0x6e, 0x61, 0xaf, 0x6a, 0xac, 0x91, 0x19, 0x1b, 0x4a, 0x62, 0xdf, 0xd1, 0xdf,
	0xc0, 0xd6, 0x20, 0xc0, 0xb7, 0xee, 0xbb, 0xa3, 0x79, 0x87, 0x5e, 0xce, 0xa6, 0x23, 0x1c, 0x28,
	0xcb, 0x1f, 0x02, 0x50, 0x66, 0x05, 0xcc, 0x64, 0xee, 0x14, 0x0b, 0xe3, 0x05, 0xa3, 0x2a, 0x28,
	0xd7, 0xee, 0x14, 0xa3, 0x1d, 0xa8, 0x60, 0xcf, 0x91, 0xcc, 0xbc, 0x60, 0xae, 0x62, 0xcf, 0x11,
	0x2c, 0x1d, 0xea, 0xae, 0x97, 0xdc, 0xb8, 0x20, 0x36, 0xae, 0xb9, 0x5e, 0xbc, 0xef, 0xef, 0xf3,
	0x80, 0xe4, 0xc6, 0x67, 0xee, 0x6f, 0x2c, 0x3b, 0x3c, 0xce, 0xa7, 0xa0, 0xf9, 0x38, 0x70, 0x89,
	0xe3, 0xda, 0x26, 0xc5, 0x36, 0xf1, 0x1c, 0x79, 0xae, 0x92, 0xb1, 0x1e, 0xd2, 0x87, 0x92, 0x8c,
	0x1e, 0xc1, 0x3a, 0xdf, 0x5c, 0x9e, 0x51, 0x4a, 0xe6, 0x85, 0x64, 0x43, 0x91, 0x43, 0xc1, 0xf7,
	0x70, 0x07, 0xfd, 0x04, 0x3e, 0x8c, 0x0f, 0x1b, 0xda, 0x33, 0x6f, 0x03, 0x32, 0x35, 0xb1, 0x4f,
	0xec, 0xbb, 0x56, 0x51, 0x1c, 0x71, 0x27, 0x3a, 0xbf, 0x32, 0x7e, 0x12, 0x90, 0x69, 0x8f, 0x0b,
	0xa0, 0x17, 0xb0, 0x33, 0x21, 0xe4, 0x7e, 0x64, 0xd9, 0xf7, 0xa6, 0x33, 0x0b, 0x2c, 0xc6, 0x37,
	0x0b, 0x1d, 0x2b, 0x09, 0xed, 0xed, 0x50, 0xe0, 0x58, 0xf1, 0x95, 0x11, 0xfd, 0x00, 0xb4, 0x73,
	0x97, 0x32, 0x89, 0x01, 0x35, 0xb0, 0x3f, 0x99, 0xa3, 0x0f, 0xa0, 0x3a, 0x15, 0x6b, 0xee, 0x71,
	0x4e, 0x78, 0x5c, 0x91, 0x84, 0xbe, 0xa3, 0xff, 0x2b, 0x07, 0x9a, 0x31, 0xf3, 0xa4, 0x82, 0x81,
	0xbf, 0x9c, 0x61, 0xca, 0xd0, 0x27, 0x50, 0x64, 0x73, 0x5f, 0x86, 0xaa, 0x71, 0x88, 0xf6, 0x55,
	0x12, 0x4b, 0xa1, 0xeb, 0xb9, 0x8f, 0x0d, 0xc1, 0x47, 0xbf, 0x82, 0xb6, 0x2f, 0x90, 0x37, 0x47,
	0x73, 0xd3, 0xa2, 0xa6, 0x27, 0xa2, 0x6e, 0x4a, 0xe3, 0x02, 0xc3, 0xda, 0xe1, 0xb7, 0x42, 0xed,
	0xe5, 0xc9, 0x61, 0x6c, 0xf9, 0xcb, 0x93, 0xe6, 0x1c, 0x36, 0x95, 0xed, 0x3b, 0x11, 0xd6, 0xd0,
	0x6a, 0x41, 0x58, 0x6d, 0xa7, 0xad, 0x26, 0x23, 0x6f, 0x20, 0x7f, 0x81, 0xa6, 0xff, 0x08, 0x1a,
	0x89, 0x53, 0x72, 0x54, 0x3e, 0x86, 0x86, 0x42, 0x65, 0x8a, 0x29, 0xb5, 0xc6, 0xd2, 0x72, 0xd5,
	0xa8, 0x4b, 0xea, 0x85, 0x24, 0xea, 0xff, 0xce, 0x01, 0x1a, 0xf2, 0x50, 0x7d, 0x35, 0x84, 0x52,
	0xd8, 0xe7, 0xc5, 0x06, 0x11, 0xf6, 0xa8, 0x0b, 0xcd, 0x31, 0x19, 0x8d, 0x7d, 0x73, 0xe2, 0x7a,
	0x99, 0xf3, 0x6d, 0x87, 0x16, 0x33, 0xb7, 0xd4, 0x58, 0x17, 0x1a, 0x89, 0x6b, 0xfb, 0x10, 0x4e,
	0xc5, 0xaf, 0x84, 0xd3, 0x01, 0x68, 0xa9, 0xd3, 0x2e, 0xe4, 0x4f, 0x21, 0x7d, 0x06, 0xfd, 0x29,
	0x34, 0x87, 0x8c, 0xf8, 0x69, 0x74, 0x32, 0x19, 0x97, 0xd6, 0xf8, 0x5d, 0x0e, 0xb4, 0xae, 0x45,
	0xa9, 0xe5, 0x39, 0x81, 0xa5, 0xee, 0x0d, 0x6a, 0x43, 0x65, 0x46, 0x71, 0xe0, 0x59, 0xaa, 0x40,
	0x54, 0x8d, 0x68, 0xcd, 0x79, 0xbe, 0x45, 0xe9, 0x5b, 0x12, 0x44, 0x10, 0x86, 0x6b, 0xb4, 0x09,
	0xa5, 0x3b, 0x42, 0x19, 0x55, 0x37, 0x51, 0x2e, 0xd0, 0x2e, 0xd4, 0xde, 0x92, 0xe0, 0x1e, 0x07,
	0x5d, 0x32, 0xf3, 0x98, 0x80, 0xa2, 0x6e, 0x24, 0x49, 0xfa, 0xdf, 0xb9, 0x13, 0xc4, 0xbe, 0x0f,
	0x88, 0x65, 0xdf, 0xfd, 0x7f, 0x9c, 0x40, 0x50, 0xf4, 0x49, 0x10, 0xee, 0x2e, 0x7e, 0x67, 0x1d,
	0x2b, 0x2d, 0x38, 0xc6, 0xab, 0xb0, 0x8d, 0x03, 0xe6, 0xb8, 0x41, 0xab, 0x2c, 0xab, 0xb0, 0x5a,
	0xea, 0x9f, 0x42, 0xed, 0xc4, 0x9d, 0xe0, 0x84, 0xb3, 0xb7, 0xee, 0x04, 0x27, 0x9d, 0x0d, 0xd7,
	0xfa, 0xf7, 0x61, 0xa3, 0x3b, 0x21, 0x34, 0x94, 0x0d, 0xc3, 0xc2, 0xeb, 0x70, 0x5c, 0xbb, 0xa4,
	0x52, 0x95, 0x46, 0x85, 0xf4, 0x10, 0x9a, 0xbc, 0x76, 0x28, 0x25, 0x55, 0x3c, 0xb2, 0x3a, 0x85,
	0xb4, 0xce, 0x5f, 0xf3, 0x80, 0xae, 0x7c, 0xec, 0x65, 0x76, 0x7a, 0x94, 0xba, 0x1e, 0x1b, 0x61,
	0x12, 0x2a, 0xa9, 0xc4, 0xfd, 0x48, 0x9b, 0xcf, 0x67, 0x5c, 0x42, 0x3d, 0x68, 0xda, 0x61, 0xaa,
	0x84, 0x75, 0x57, 0xdd, 0x90, 0x56, 0x68, 0x34, 0x9b, 0x4b, 0x86, 0x66, 0x67, 0xb3, 0xeb, 0x87,
	0xb0, 0xc6, 0xb1, 0x89, 0x2c, 0xc8, 0xbb, 0x11, 0xb9, 0x95, 0x80, 0xd5, 0xa8, 0xdd, 0x26, 0x30,
	0xe6, 0xdb, 0x87, 0x49, 0x12, 0x29, 0x97, 0x32, 0xdb, 0x67, 0xb2, 0xc8, 0xd0, 0xec, 0x0c, 0x45,
	0xff, 0x1c, 0xb4, 0x14, 0x46, 0xcb, 0x70, 0xcd, 0xc4, 0xe2, 0x9f, 0x45, 0x58, 0x7b, 0x1d, 0xb8,
	0x2c, 0xba, 0x52, 0x4f, 0x52, 0x88, 0xee, 0x84, 0xbb, 0x27, 0x65, 0xf6, 0xdf, 0x1f, 0xd7, 0x13,
	0x40, 0x71, 0xb9, 0x9e, 0x10, 0x5b, 0xbc, 0x21, 0x59, 0x60, 0x3b, 0x43, 0x59, 0x90, 0xcf, 0x15,
	0xdf, 0xd0, 0x2c, 0x9a, 0xa6, 0x70, 0x3b, 0xbc, 0x7e, 0xcd, 0x7c, 0xc7, 0x62, 0x71, 0x21, 0x2d,
	0xa6, 0xed, 0x1c, 0x9d, 0x0e, 0x6e, 0x84, 0x80, 0xaa, 0xa9, 0x86, 0x36, 0x1a, 0xfb, 0x29, 0x0a,
	0xea, 0xc3, 0x86, 0xeb, 0x9b, 0xaa, 0xdf, 0x88, 0x1d, 0x92, 0x50, 0x47, 0x87, 0xed, 0x0f, 0x3a,
	0x52, 0x22, 0xf2, 0xa8, 0xe9, 0xfa, 0x19, 0x12, 0x7a, 0x09, 0xeb, 0xaa, 0x1e, 0x46, 0x66, 0xca,
	0xc2, 0xcc, 0x56, 0xba, 0x14, 0x46, 0x36, 0x1a, 0x7e, 0x6a, 0x8d, 0x9e, 0x41, 0x8d, 0x9f, 0xc9,
	0xb6, 0x7c, 0x36, 0x0b, 0x70, 0x6b, 0x55, 0x28, 0xa3, 0xc4, 0x61, 0xba, 0x92, 0x63, 0xc0, 0x68,
	0xec, 0xab, 0xdf, 0xe8, 0x09, 0x54, 0xb9, 0x12, 0x65, 0x16, 0xa3, 0xad, 0x8a, 0x50, 0xd1, 0x12,
	0x2a, 0x43, 0x4e, 0x37, 0x2a, 0xa3, 0xb1, 0x2f, 0x7e, 0xe9, 0xbf, 0x85, 0x22, 0x0f, 0x16, 0xda,
	0x02, 0xd4, 0x19, 0x9a, 0x97, 0x37, 0x17, 0x47, 0x3d, 0xc3, 0x3c, 0xbf, 0xea, 0x76, 0xae, 0xfb,
	0x57, 0x97, 0xda, 0x0a, 0x6a, 0x00, 0x1c, 0x9d, 0x0e, 0xcc, 0x9b, 0xc1, 0x71, 0xe7, 0xba, 0xa7,
	0xe5, 0xd0, 0x36, 0x6c, 0xf4, 0x07, 0x66, 0xe7, 0xf8, 0xd8, 0xe8, 0x0d, 0x87, 0xb1, 0x60, 0x1e,
	0x6d, 0xc0, 0xfa, 0xc0, 0xe8, 0x9d, 0xf4, 0x7f, 0x11, 0x13, 0x0b, 0x68, 0x1d, 0x6a, 0x5c, 0xbb,
	0xdb, 0x19, 0x5c, 0xdf, 0x18, 0x3d, 0xad, 0x88, 0xea, 0x50, 0xe5, 0x84, 0xe1, 0x75, 0xe7, 0x7a,
	0xa8, 0x95, 0xf4, 0x3f, 0xe6, 0x40, 0xcb, 0x06, 0x97, 0xd7, 0xec, 0x28, 0x25, 0x44, 0x96, 0xd5,
	0x8d, 0x4a, 0x18, 0x6f, 0xf4, 0x11, 0xac, 0x4d, 0xb1, 0x45, 0x67, 0x01, 0x36, 0x79, 0xd8, 0x54,
	0x42, 0xd5, 0x14, 0xed, 0xd8, 0x62, 0x18, 0x7d, 0x06, 0x95, 0x4c, 0x22, 0x45, 0x00, 0x44, 0x50,
	0x47, 0x12, 0x68, 0x0b, 0xca, 0x94, 0xcc, 0x02, 0x5b, 0x26, 0x4b, 0xd5, 0x50, 0x2b, 0xfd, 0x2f,
	0x05, 0xd0, 0xb2, 0xf9, 0x82, 0xbe, 0x09, 0x55, 0xde, 0x4c, 0x51, 0x66, 0x4d, 0xfd, 0xb0, 0x7d,
	0x8c, 0x08, 0xe8, 0x29, 0x6c, 0xda, 0x64, 0x32, 0xc1, 0x36, 0x23, 0x81, 0x19, 0x67, 0x91, 0xf2,
	0x11, 0x45, 0xbc, 0x7e, 0x98, 0x2a, 0xe8, 0x10, 0xbe, 0x11, 0x6b, 0x4c, 0x2d, 0x3b, 0x52, 0x91,
	0x8f, 0xdb, 0x46, 0xc4, 0xbc, 0xb0, 0xec, 0x50, 0xe7, 0x63, 0x68, 0xc4, 0x3a, 0x89, 0xba, 0x5e,
	0x8f, 0xa8, 0x03, 0x5e, 0xe0, 0x3f, 0x81, 0x75, 0x1f, 0xe3, 0x94, 0x1f, 0x25, 0xd9, 0x56, 0x70,
	0x72, 0xec, 0xc2, 0x36, 0xac, 0x5a, 0xd4, 0xf4, 0x2d, 0x76, 0xd7, 0x2a, 0xef, 0x16, 0xf6, 0xea,
	0x46, 0xd9, 0xa2, 0x03, 0x8b, 0xdd, 0xf1, 0x66, 0xd8, 0xc3, 0xef, 0x98, 0x79, 0x47, 0xfc, 0x56,
	0x55, 0x3e, 0x00, 0x7c, 0x7d, 0x46, 0x7c, 0xd4, 0x81, 0x0d, 0xcb, 0x79, 0x83, 0x03, 0xe6, 0x52,
	0xec, 0x98, 0x32, 0x6b, 0x31, 0x6d, 0xad, 0xee, 0x16, 0x92, 0x60, 0xf7, 0x07, 0x32, 0xbf, 0x0d,
	0x14, 0x0b, 0x0f, 0x94, 0x2c, 0x7a, 0x09, 0xe8, 0xad, 0xcb, 0xee, 0x9c, 0xc0, 0x7a, 0xeb, 0xc5,
	0x16, 0x2a, 0x0f, 0x58, 0x68, 0x46, 0xb2, 0xa1, 0x01, 0xfd, 0x1f, 0x79, 0x91, 0x99, 0x61, 0xda,
	0x2f, 0x44, 0xa6, 0x9e, 0x8c, 0xcc, 0x36, 0xac, 0x0a, 0x30, 0x2c, 0x19, 0x8c, 0xba, 0x51, 0xe6,
	0xcb, 0x0e, 0xe5, 0x87, 0xe4, 0x99, 0x30, 0xe1, 0x9c, 0x82, 0xe0, 0xac, 0x8a, 0x75, 0x47, 0xf4,
	0xe2, 0xae, 0xc7, 0x70, 0x70, 0x6b, 0xd9, 0xd8, 0x74, 0x3d, 0x07, 0xbf, 0x53, 0x40, 0x37, 0x22,
	0x72, 0x9f, 0x53, 0x79, 0x40, 0xc2, 0x7a, 0x71, 0x6b, 0x4d, 0xdd, 0xc9, 0x5c, 0xbd, 0xa6, 0x75,
	0x45, 0x3d, 0x11, 0x44, 0xf4, 0xb9, 0xf2, 0xc1, 0xf5, 0x55, 0x19, 0x68, 0xed, 0xab, 0x79, 0x2a,
	0xaa, 0x26, 0xaf, 0x03, 0xcb, 0xf7, 0x71, 0x20, 0xbd, 0xeb, 0xfb, 0xe8, 0x59, 0xe8, 0x9d, 0xeb,
	0xab, 0xdb, 0xff, 0xb0, 0x8e, 0xf4, 0xbb, 0xef, 0xa3, 0x4f, 0xa0, 0x2c, 0xab, 0xa0, 0xba, 0xfd,
	0x0d, 0x8e, 0x66, 0x5c, 0xfa, 0x0c, 0xc5, 0xd5, 0xff, 0x9c, 0x83, 0xe6, 0x42, 0x1d, 0xe3, 0xe5,
	0x3a, 0x91, 0x31, 0xea, 0x35, 0x88, 0x6a, 0xdb, 0xd7, 0x77, 0xfd, 0x5e, 0x43, 0x25, 0x8c, 0x3e,
	0x7a, 0x0c, 0x4d, 0x55, 0x48, 0x17, 0x5c, 0x53, 0x15, 0x36, 0x4e, 0xe7, 0x6f, 0x43, 0x4d, 0xc9,
	0x4e, 0x2d, 0x7a, 0xaf, 0xa2, 0x0d, 0x92, 0x74, 0x61, 0xd1, 0x7b, 0xfd, 0x4f, 0x39, 0xa8, 0x44,
	0xa7, 0xfd, 0x08, 0xd6, 0x6c, 0xde, 0xec, 0x04, 0x73, 0xd3, 0x26, 0x4e, 0xd8, 0xbe, 0xd4, 0x14,
	0xad, 0x4b, 0x9c, 0x70, 0x64, 0x64, 0x58, 0x0a, 0x84, 0xef, 0x17, 0xa7, 0x08, 0x36, 0x82, 0xa2,
	0xed, 0xb2, 0xb9, 0xba, 0xb0, 0xe2, 0x37, 0x6f, 0x88, 0x26, 0x16, 0x73, 0xd9, 0xcc, 0x91, 0xa7,
	0xca, 0x19, 0xd1, 0x9a, 0xe7, 0xe9, 0x84, 0x78, 0x63, 0xc9, 0x2c, 0x09, 0x66, 0x4c, 0xd0, 0xbf,
	0x84, 0x92, 0x6c, 0xbe, 0xf6, 0xa1, 0x24, 0x9c, 0x10, 0x7d, 0x4e, 0xea, 0x8d, 0x9f, 0x79, 0x4c,
	0xfe, 0xdf, 0xe3, 0x2e, 0x1a, 0x52, 0xac, 0xfd, 0x1c, 0x20, 0x26, 0x22, 0x0d, 0x0a, 0xf7, 0x78,
	0xae, 0x4e, 0xc3, 0x7f, 0xf2, 0xc6, 0xf0, 0x8d, 0x35, 0x99, 0x61, 0x05, 0x88, 0x5c, 0xbc, 0xc8,
	0x3f, 0xcf, 0xe9, 0x7f, 0x28, 0x42, 0x25, 0x7c, 0x17, 0x24, 0x1e, 0x71, 0x05, 0x8b, 0xf1, 0x88,
	0x2a, 0x17, 0xfa, 0x0c, 0x9a, 0xfc, 0x5e, 0x89, 0xde, 0x7c, 0x88, 0x6d, 0x31, 0x28, 0x0a, 0xab,
	0x45, 0x63, 0x91, 0xc1, 0xdb, 0x4c, 0x27, 0x1e, 0x0c, 0xd5, 0x15, 0x4b, 0x92, 0xd0, 0xf7, 0xa0,
	0x3a, 0xa5, 0x63, 0xe1, 0x3c, 0x55, 0xef, 0x75, 0x3d, 0x75, 0x5a, 0x23, 0xe6, 0xa3, 0x5f, 0xc3,
	0xa6, 0x83, 0x29, 0xeb, 0xd0, 0x6b, 0x22, 0x73, 0x43, 0xe9, 0x95, 0x04, 0x4a, 0x8f, 0xb3, 0xef,
	0xdc, 0xfe, 0xf1, 0x12, 0x61, 0x89, 0xdb, 0x52, 0x3b, 0xe8, 0x06, 0x9a, 0x21, 0xbd, 0x33, 0x1c,
	0x28, 0xe3, 0x65, 0x61, 0xfc, 0xd1, 0x83, 0xc6, 0x23, 0x49, 0x69, 0x79, 0xd1, 0x42, 0xfb, 0xe7,
	0xb0, 0xf3, 0xa0, 0x27, 0x4b, 0x82, 0xf5, 0x9d, 0x64, 0xb0, 0x16, 0xe0, 0x88, 0x63, 0xd7, 0x1e,
	0xc2, 0xd6, 0x72, 0x27, 0xfe, 0x07, 0xa3, 0xfa, 0xdf, 0x72, 0xd0, 0x48, 0x37, 0x26, 0x68, 0x0f,
	0xca, 0xf2, 0x06, 0x09, 0x83, 0xcb, 0x0a, 0xb4, 0xe2, 0x7f, 0x6d, 0xf5, 0xe1, 0xf1, 0x19, 0x40,
	0x3c, 0xe2, 0xf2, 0x2e, 0xe5, 0xf4, 0x8a, 0x37, 0x16, 0xe7, 0xfd, 0xcb, 0x57, 0xda, 0x0a, 0xef,
	0x52, 0x54, 0x33, 0x72, 0xf4, 0x4b, 0x33, 0xea, 0x6b, 0xb4, 0x1c, 0x6a, 0x42, 0x5d, 0x31, 0xce,
	0xfa, 0x3f, 0xed, 0x74, 0x5f, 0x69, 0xf9, 0xc7, 0x3f, 0x80, 0x5a, 0x62, 0x1a, 0xe0, 0x1d, 0x4a,
	0xb7, 0x33, 0x1c, 0x76, 0x2e, 0x8f, 0x8d, 0x8e, 0xb6, 0x82, 0x2a, 0x50, 0x3c, 0xe9, 0x9f, 0xf3,
	0xce, 0x87, 0x33, 0xae, 0xba, 0xaf, 0x8c, 0xab, 0x4e, 0xf7, 0x4c, 0xcb, 0x1f, 0xfe, 0xa7, 0x00,
	0xab, 0x47, 0xc2, 0x6d, 0x07, 0x7d, 0x01, 0x6b, 0xc9, 0x29, 0x07, 0x7d, 0x10, 0x81, 0xbb, 0x38,
	0xfb, 0xb4, 0x23, 0xe4, 0xe5, 0xf7, 0xaf, 0x15, 0xf4, 0x1c, 0x6a, 0x89, 0x2f, 0x25, 0x28, 0xcd,
	0x6f, 0x47, 0x57, 0x3f, 0xfb, 0x35, 0x45, 0x5f, 0x41, 0x2f, 0x60, 0x2d, 0x39, 0x27, 0x65, 0x55,
	0x77, 0x92, 0xaa, 0xa9, 0x61, 0x4a, 0x5f, 0x41, 0x2f, 0xa1, 0x1a, 0x7d, 0x87, 0x40, 0xd1, 0x26,
	0xd9, 0x0f, 0x30, 0xed, 0xad, 0x25, 0x1c, 0x69, 0xa0, 0x07, 0xb5, 0xc4, 0x80, 0x8e, 0xa2, 0xf9,
	0x7e, 0xf1, 0x1b, 0x45, 0x7c, 0x86, 0xec, 0x44, 0x2f, 0x4e, 0x0f, 0xf1, 0xd8, 0x8e, 0x76, 0x62,
	0xc9, 0xcc, 0x28, 0xbf, 0x88, 0x5b, 0x0f, 0x6a, 0x89, 0x61, 0x26, 0x76, 0x60, 0x71, 0x0a, 0x8c,
	0x1d, 0xc8, 0x4e, 0x3f, 0xfa, 0x0a, 0x7a, 0x0a, 0x25, 0x31, 0xbb, 0xa0, 0xcd, 0x65, 0xa3, 0xcc,
	0xc2, 0xb6, 0x7b, 0xb9, 0x51, 0x59, 0x7c, 0xc2, 0x7c, 0xf6, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x16, 0xd0, 0xf8, 0x32, 0x80, 0x15, 0x00, 0x00,
}
