// Code generated by protoc-gen-go.
// source: github.com/CSUNetSec/netsec-protobufs/proddle/proddle.proto
// DO NOT EDIT!

/*
Package proddle is a generated protocol buffer package.

It is generated from these files:
	github.com/CSUNetSec/netsec-protobufs/proddle/proddle.proto

It has these top-level messages:
	Probe
	ProbeResult
	CancelProbeRequest
	CancelProbeReply
	SearchRequest
	SearchReply
	ScheduleProbeRequest
	ScheduleProbeReply
	BucketHash
	BucketProbes
	GetProbesRequest
	GetProbesReply
	GetBucketKeysRequest
	GetBucketKeysReply
	SendProbeResultsRequest
	SendProbeResultsReply
*/
package proddle

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// probe messages
type Protocol int32

const (
	Protocol_DNS        Protocol = 0
	Protocol_HTTP       Protocol = 1
	Protocol_HTTPS      Protocol = 2
	Protocol_PING       Protocol = 3
	Protocol_TRACEROUTE Protocol = 4
)

var Protocol_name = map[int32]string{
	0: "DNS",
	1: "HTTP",
	2: "HTTPS",
	3: "PING",
	4: "TRACEROUTE",
}
var Protocol_value = map[string]int32{
	"DNS":        0,
	"HTTP":       1,
	"HTTPS":      2,
	"PING":       3,
	"TRACEROUTE": 4,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Probe struct {
	ProbeId                  uint64   `protobuf:"varint,1,opt,name=probe_id,json=probeId" json:"probe_id,omitempty"`
	ProbeIntervalSeconds     uint32   `protobuf:"varint,2,opt,name=probe_interval_seconds,json=probeIntervalSeconds" json:"probe_interval_seconds,omitempty"`
	TimeoutSeconds           uint32   `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds" json:"timeout_seconds,omitempty"`
	AttemptsToDeclareFailure uint32   `protobuf:"varint,4,opt,name=attempts_to_declare_failure,json=attemptsToDeclareFailure" json:"attempts_to_declare_failure,omitempty"`
	Protocol                 Protocol `protobuf:"varint,5,opt,name=protocol,enum=Protocol" json:"protocol,omitempty"`
	Domain                   string   `protobuf:"bytes,6,opt,name=domain" json:"domain,omitempty"`
	// HTTP/HTTPS specific
	Port           uint32 `protobuf:"varint,7,opt,name=port" json:"port,omitempty"`
	UrlSuffix      string `protobuf:"bytes,8,opt,name=url_suffix,json=urlSuffix" json:"url_suffix,omitempty"`
	FollowRedirect bool   `protobuf:"varint,9,opt,name=follow_redirect,json=followRedirect" json:"follow_redirect,omitempty"`
}

func (m *Probe) Reset()                    { *m = Probe{} }
func (m *Probe) String() string            { return proto.CompactTextString(m) }
func (*Probe) ProtoMessage()               {}
func (*Probe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProbeResult struct {
	ProbeId                        uint64   `protobuf:"varint,1,opt,name=probe_id,json=probeId" json:"probe_id,omitempty"`
	ProberHostname                 string   `protobuf:"bytes,2,opt,name=prober_hostname,json=proberHostname" json:"prober_hostname,omitempty"`
	Protocol                       Protocol `protobuf:"varint,3,opt,name=protocol,enum=Protocol" json:"protocol,omitempty"`
	TimestampSec                   uint64   `protobuf:"varint,4,opt,name=timestamp_sec,json=timestampSec" json:"timestamp_sec,omitempty"`
	Success                        bool     `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
	ErrorMessage                   string   `protobuf:"bytes,6,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	ApplicationLayerLatencyNanosec uint64   `protobuf:"varint,7,opt,name=application_layer_latency_nanosec,json=applicationLayerLatencyNanosec" json:"application_layer_latency_nanosec,omitempty"`
	// DNS specific
	DnsAnswer [][]byte `protobuf:"bytes,8,rep,name=dns_answer,json=dnsAnswer,proto3" json:"dns_answer,omitempty"`
	// HTTP/HTTPS specific
	HttpStatusCode           uint32 `protobuf:"varint,9,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
	HttpStatusMessage        string `protobuf:"bytes,10,opt,name=http_status_message,json=httpStatusMessage" json:"http_status_message,omitempty"`
	ApplicationBytesReceived uint32 `protobuf:"varint,11,opt,name=application_bytes_received,json=applicationBytesReceived" json:"application_bytes_received,omitempty"`
}

func (m *ProbeResult) Reset()                    { *m = ProbeResult{} }
func (m *ProbeResult) String() string            { return proto.CompactTextString(m) }
func (*ProbeResult) ProtoMessage()               {}
func (*ProbeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CancelProbeRequest struct {
	Domain   string     `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Protocol []Protocol `protobuf:"varint,2,rep,packed,name=protocol,enum=Protocol" json:"protocol,omitempty"`
	// HTTP specific
	UrlSuffix string `protobuf:"bytes,3,opt,name=url_suffix,json=urlSuffix" json:"url_suffix,omitempty"`
}

func (m *CancelProbeRequest) Reset()                    { *m = CancelProbeRequest{} }
func (m *CancelProbeRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelProbeRequest) ProtoMessage()               {}
func (*CancelProbeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CancelProbeReply struct {
}

func (m *CancelProbeReply) Reset()                    { *m = CancelProbeReply{} }
func (m *CancelProbeReply) String() string            { return proto.CompactTextString(m) }
func (*CancelProbeReply) ProtoMessage()               {}
func (*CancelProbeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SearchRequest struct {
	Protocol []Protocol `protobuf:"varint,1,rep,packed,name=protocol,enum=Protocol" json:"protocol,omitempty"`
	Domain   string     `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SearchReply struct {
	Probe []*Probe `protobuf:"bytes,1,rep,name=probe" json:"probe,omitempty"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SearchReply) GetProbe() []*Probe {
	if m != nil {
		return m.Probe
	}
	return nil
}

type ScheduleProbeRequest struct {
	Probe []*Probe `protobuf:"bytes,2,rep,name=probe" json:"probe,omitempty"`
}

func (m *ScheduleProbeRequest) Reset()                    { *m = ScheduleProbeRequest{} }
func (m *ScheduleProbeRequest) String() string            { return proto.CompactTextString(m) }
func (*ScheduleProbeRequest) ProtoMessage()               {}
func (*ScheduleProbeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ScheduleProbeRequest) GetProbe() []*Probe {
	if m != nil {
		return m.Probe
	}
	return nil
}

type ScheduleProbeReply struct {
}

func (m *ScheduleProbeReply) Reset()                    { *m = ScheduleProbeReply{} }
func (m *ScheduleProbeReply) String() string            { return proto.CompactTextString(m) }
func (*ScheduleProbeReply) ProtoMessage()               {}
func (*ScheduleProbeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type BucketHash struct {
	BucketKey uint64 `protobuf:"varint,1,opt,name=bucket_key,json=bucketKey" json:"bucket_key,omitempty"`
	Hash      uint64 `protobuf:"varint,2,opt,name=hash" json:"hash,omitempty"`
}

func (m *BucketHash) Reset()                    { *m = BucketHash{} }
func (m *BucketHash) String() string            { return proto.CompactTextString(m) }
func (*BucketHash) ProtoMessage()               {}
func (*BucketHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type BucketProbes struct {
	BucketKey uint64   `protobuf:"varint,1,opt,name=bucket_key,json=bucketKey" json:"bucket_key,omitempty"`
	Probe     []*Probe `protobuf:"bytes,2,rep,name=probe" json:"probe,omitempty"`
}

func (m *BucketProbes) Reset()                    { *m = BucketProbes{} }
func (m *BucketProbes) String() string            { return proto.CompactTextString(m) }
func (*BucketProbes) ProtoMessage()               {}
func (*BucketProbes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BucketProbes) GetProbe() []*Probe {
	if m != nil {
		return m.Probe
	}
	return nil
}

type GetProbesRequest struct {
	BucketHash []*BucketHash `protobuf:"bytes,1,rep,name=bucket_hash,json=bucketHash" json:"bucket_hash,omitempty"`
}

func (m *GetProbesRequest) Reset()                    { *m = GetProbesRequest{} }
func (m *GetProbesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProbesRequest) ProtoMessage()               {}
func (*GetProbesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetProbesRequest) GetBucketHash() []*BucketHash {
	if m != nil {
		return m.BucketHash
	}
	return nil
}

type GetProbesReply struct {
	BucketProbes []*BucketProbes `protobuf:"bytes,1,rep,name=bucket_probes,json=bucketProbes" json:"bucket_probes,omitempty"`
}

func (m *GetProbesReply) Reset()                    { *m = GetProbesReply{} }
func (m *GetProbesReply) String() string            { return proto.CompactTextString(m) }
func (*GetProbesReply) ProtoMessage()               {}
func (*GetProbesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetProbesReply) GetBucketProbes() []*BucketProbes {
	if m != nil {
		return m.BucketProbes
	}
	return nil
}

type GetBucketKeysRequest struct {
}

func (m *GetBucketKeysRequest) Reset()                    { *m = GetBucketKeysRequest{} }
func (m *GetBucketKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBucketKeysRequest) ProtoMessage()               {}
func (*GetBucketKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetBucketKeysReply struct {
	BucketKey []uint64 `protobuf:"varint,1,rep,packed,name=bucket_key,json=bucketKey" json:"bucket_key,omitempty"`
}

func (m *GetBucketKeysReply) Reset()                    { *m = GetBucketKeysReply{} }
func (m *GetBucketKeysReply) String() string            { return proto.CompactTextString(m) }
func (*GetBucketKeysReply) ProtoMessage()               {}
func (*GetBucketKeysReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type SendProbeResultsRequest struct {
	ProbeResult []*ProbeResult `protobuf:"bytes,1,rep,name=probe_result,json=probeResult" json:"probe_result,omitempty"`
}

func (m *SendProbeResultsRequest) Reset()                    { *m = SendProbeResultsRequest{} }
func (m *SendProbeResultsRequest) String() string            { return proto.CompactTextString(m) }
func (*SendProbeResultsRequest) ProtoMessage()               {}
func (*SendProbeResultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SendProbeResultsRequest) GetProbeResult() []*ProbeResult {
	if m != nil {
		return m.ProbeResult
	}
	return nil
}

type SendProbeResultsReply struct {
}

func (m *SendProbeResultsReply) Reset()                    { *m = SendProbeResultsReply{} }
func (m *SendProbeResultsReply) String() string            { return proto.CompactTextString(m) }
func (*SendProbeResultsReply) ProtoMessage()               {}
func (*SendProbeResultsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func init() {
	proto.RegisterType((*Probe)(nil), "Probe")
	proto.RegisterType((*ProbeResult)(nil), "ProbeResult")
	proto.RegisterType((*CancelProbeRequest)(nil), "CancelProbeRequest")
	proto.RegisterType((*CancelProbeReply)(nil), "CancelProbeReply")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchReply)(nil), "SearchReply")
	proto.RegisterType((*ScheduleProbeRequest)(nil), "ScheduleProbeRequest")
	proto.RegisterType((*ScheduleProbeReply)(nil), "ScheduleProbeReply")
	proto.RegisterType((*BucketHash)(nil), "BucketHash")
	proto.RegisterType((*BucketProbes)(nil), "BucketProbes")
	proto.RegisterType((*GetProbesRequest)(nil), "GetProbesRequest")
	proto.RegisterType((*GetProbesReply)(nil), "GetProbesReply")
	proto.RegisterType((*GetBucketKeysRequest)(nil), "GetBucketKeysRequest")
	proto.RegisterType((*GetBucketKeysReply)(nil), "GetBucketKeysReply")
	proto.RegisterType((*SendProbeResultsRequest)(nil), "SendProbeResultsRequest")
	proto.RegisterType((*SendProbeResultsReply)(nil), "SendProbeResultsReply")
	proto.RegisterEnum("Protocol", Protocol_name, Protocol_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Scheduler service

type SchedulerClient interface {
	CancelProbe(ctx context.Context, in *CancelProbeRequest, opts ...grpc.CallOption) (*CancelProbeReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	ScheduleProbe(ctx context.Context, in *ScheduleProbeRequest, opts ...grpc.CallOption) (*ScheduleProbeReply, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) CancelProbe(ctx context.Context, in *CancelProbeRequest, opts ...grpc.CallOption) (*CancelProbeReply, error) {
	out := new(CancelProbeReply)
	err := grpc.Invoke(ctx, "/Scheduler/CancelProbe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := grpc.Invoke(ctx, "/Scheduler/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ScheduleProbe(ctx context.Context, in *ScheduleProbeRequest, opts ...grpc.CallOption) (*ScheduleProbeReply, error) {
	out := new(ScheduleProbeReply)
	err := grpc.Invoke(ctx, "/Scheduler/ScheduleProbe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	CancelProbe(context.Context, *CancelProbeRequest) (*CancelProbeReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	ScheduleProbe(context.Context, *ScheduleProbeRequest) (*ScheduleProbeReply, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_CancelProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CancelProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Scheduler/CancelProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CancelProbe(ctx, req.(*CancelProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Scheduler/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ScheduleProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ScheduleProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Scheduler/ScheduleProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ScheduleProbe(ctx, req.(*ScheduleProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelProbe",
			Handler:    _Scheduler_CancelProbe_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Scheduler_Search_Handler,
		},
		{
			MethodName: "ScheduleProbe",
			Handler:    _Scheduler_ScheduleProbe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for ProbeCache service

type ProbeCacheClient interface {
	GetProbes(ctx context.Context, in *GetProbesRequest, opts ...grpc.CallOption) (*GetProbesReply, error)
	GetBucketKeys(ctx context.Context, in *GetBucketKeysRequest, opts ...grpc.CallOption) (*GetBucketKeysReply, error)
	SendProbeResults(ctx context.Context, in *SendProbeResultsRequest, opts ...grpc.CallOption) (*SendProbeResultsReply, error)
}

type probeCacheClient struct {
	cc *grpc.ClientConn
}

func NewProbeCacheClient(cc *grpc.ClientConn) ProbeCacheClient {
	return &probeCacheClient{cc}
}

func (c *probeCacheClient) GetProbes(ctx context.Context, in *GetProbesRequest, opts ...grpc.CallOption) (*GetProbesReply, error) {
	out := new(GetProbesReply)
	err := grpc.Invoke(ctx, "/ProbeCache/GetProbes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeCacheClient) GetBucketKeys(ctx context.Context, in *GetBucketKeysRequest, opts ...grpc.CallOption) (*GetBucketKeysReply, error) {
	out := new(GetBucketKeysReply)
	err := grpc.Invoke(ctx, "/ProbeCache/GetBucketKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *probeCacheClient) SendProbeResults(ctx context.Context, in *SendProbeResultsRequest, opts ...grpc.CallOption) (*SendProbeResultsReply, error) {
	out := new(SendProbeResultsReply)
	err := grpc.Invoke(ctx, "/ProbeCache/SendProbeResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProbeCache service

type ProbeCacheServer interface {
	GetProbes(context.Context, *GetProbesRequest) (*GetProbesReply, error)
	GetBucketKeys(context.Context, *GetBucketKeysRequest) (*GetBucketKeysReply, error)
	SendProbeResults(context.Context, *SendProbeResultsRequest) (*SendProbeResultsReply, error)
}

func RegisterProbeCacheServer(s *grpc.Server, srv ProbeCacheServer) {
	s.RegisterService(&_ProbeCache_serviceDesc, srv)
}

func _ProbeCache_GetProbes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProbesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeCacheServer).GetProbes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProbeCache/GetProbes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeCacheServer).GetProbes(ctx, req.(*GetProbesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProbeCache_GetBucketKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeCacheServer).GetBucketKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProbeCache/GetBucketKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeCacheServer).GetBucketKeys(ctx, req.(*GetBucketKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProbeCache_SendProbeResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProbeResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeCacheServer).SendProbeResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProbeCache/SendProbeResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeCacheServer).SendProbeResults(ctx, req.(*SendProbeResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProbeCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ProbeCache",
	HandlerType: (*ProbeCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProbes",
			Handler:    _ProbeCache_GetProbes_Handler,
		},
		{
			MethodName: "GetBucketKeys",
			Handler:    _ProbeCache_GetBucketKeys_Handler,
		},
		{
			MethodName: "SendProbeResults",
			Handler:    _ProbeCache_SendProbeResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/CSUNetSec/netsec-protobufs/proddle/proddle.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xeb, 0x6e, 0xdb, 0x36,
	0x14, 0x8e, 0x2f, 0xb1, 0xad, 0xe3, 0x4b, 0x1d, 0x26, 0x4d, 0x35, 0xef, 0x82, 0x4d, 0xc3, 0xb0,
	0x60, 0x17, 0x05, 0x73, 0x0b, 0xec, 0xc7, 0x56, 0x6c, 0x8d, 0xd3, 0x36, 0x59, 0x3b, 0x2f, 0xa0,
	0xdc, 0xdf, 0x02, 0x2d, 0xd1, 0xb5, 0x50, 0x59, 0xf4, 0x48, 0xaa, 0x9d, 0x1f, 0x6a, 0xaf, 0xb1,
	0x97, 0x18, 0xb0, 0x67, 0x19, 0x49, 0x49, 0xb6, 0xec, 0x38, 0xed, 0x2f, 0x91, 0x1f, 0x3f, 0x9e,
	0xf3, 0x9d, 0x73, 0x3e, 0x0a, 0x7e, 0x7a, 0x1d, 0xc9, 0x79, 0x3a, 0x75, 0x03, 0xb6, 0x38, 0x1f,
	0x79, 0xaf, 0xc6, 0x54, 0x7a, 0x34, 0x38, 0x4f, 0xa8, 0x14, 0x34, 0xf8, 0x7e, 0xc9, 0x99, 0x64,
	0xd3, 0x74, 0x26, 0xce, 0xd5, 0x2a, 0x0c, 0x63, 0x5a, 0x7c, 0x5d, 0x73, 0xe2, 0xfc, 0x5b, 0x85,
	0xc3, 0x1b, 0xce, 0xa6, 0x14, 0x7d, 0x04, 0xad, 0xa5, 0x5e, 0xf8, 0x51, 0x68, 0x57, 0x3e, 0xaf,
	0x9c, 0xd5, 0x71, 0xd3, 0xec, 0xaf, 0x43, 0xf4, 0x08, 0x4e, 0xf3, 0xa3, 0x44, 0x52, 0xfe, 0x96,
	0xc4, 0xbe, 0x0a, 0xcd, 0x92, 0x50, 0xd8, 0x55, 0x45, 0xec, 0xe2, 0x93, 0x8c, 0x98, 0x1f, 0x7a,
	0xd9, 0x19, 0xfa, 0x1a, 0xee, 0xc9, 0x68, 0x41, 0x59, 0x2a, 0xd7, 0xf4, 0x9a, 0xa1, 0xf7, 0x72,
	0xb8, 0x20, 0x3e, 0x86, 0x8f, 0x89, 0x94, 0x74, 0xb1, 0x94, 0xc2, 0x97, 0xcc, 0x0f, 0x69, 0x10,
	0x13, 0x4e, 0xfd, 0x19, 0x89, 0xe2, 0x94, 0x53, 0xbb, 0x6e, 0x2e, 0xd9, 0x05, 0x65, 0xc2, 0x2e,
	0x33, 0xc2, 0xb3, 0xec, 0x1c, 0x7d, 0x65, 0x84, 0x4b, 0x16, 0xb0, 0xd8, 0x3e, 0x54, 0xdc, 0xde,
	0xd0, 0x72, 0x6f, 0x72, 0x00, 0xaf, 0x8f, 0xd0, 0x29, 0x34, 0x42, 0xb6, 0x20, 0x51, 0x62, 0x37,
	0x14, 0xc9, 0xc2, 0xf9, 0x0e, 0x21, 0xa8, 0x2f, 0x19, 0x97, 0x76, 0xd3, 0xa4, 0x31, 0x6b, 0xf4,
	0x29, 0x40, 0xca, 0x55, 0x95, 0xe9, 0x6c, 0x16, 0xfd, 0x65, 0xb7, 0x0c, 0xdf, 0x52, 0x88, 0x67,
	0x00, 0x5d, 0xd9, 0x8c, 0xc5, 0x31, 0x7b, 0xe7, 0x73, 0x1a, 0x46, 0x9c, 0x06, 0xd2, 0xb6, 0x14,
	0xa7, 0x85, 0x7b, 0x19, 0x8c, 0x73, 0xd4, 0xf9, 0xaf, 0x06, 0x6d, 0xd3, 0x5d, 0x4c, 0x45, 0x1a,
	0xcb, 0xf7, 0xf5, 0x58, 0xc5, 0x34, 0x4b, 0xee, 0xcf, 0x99, 0x90, 0x09, 0x59, 0x50, 0xd3, 0x5c,
	0x0b, 0xf7, 0x32, 0xf8, 0x2a, 0x47, 0xb7, 0xca, 0xad, 0xdd, 0x5d, 0xee, 0x97, 0xd0, 0xd5, 0x6d,
	0x16, 0x92, 0x2c, 0x96, 0xba, 0xff, 0xa6, 0x8d, 0x75, 0xdc, 0x59, 0x83, 0xaa, 0xfb, 0xc8, 0x86,
	0xa6, 0x48, 0x83, 0x80, 0x0a, 0x61, 0x3a, 0xd7, 0xc2, 0xc5, 0x56, 0x5f, 0xa7, 0x9c, 0x33, 0xee,
	0x2b, 0xb6, 0x20, 0xaf, 0x69, 0xde, 0xb4, 0x8e, 0x01, 0x7f, 0xcf, 0x30, 0x74, 0x0d, 0x5f, 0x90,
	0xe5, 0x32, 0x8e, 0x02, 0x22, 0x23, 0x96, 0xf8, 0x31, 0x59, 0x29, 0xf9, 0x31, 0x91, 0x34, 0x09,
	0x56, 0x7e, 0x42, 0x12, 0xa6, 0xf3, 0x36, 0x4d, 0xde, 0xcf, 0x4a, 0xc4, 0x97, 0x9a, 0xf7, 0x32,
	0xa3, 0x8d, 0x33, 0x96, 0xee, 0x78, 0x98, 0x08, 0x9f, 0x24, 0xe2, 0x1d, 0xe5, 0xaa, 0xe3, 0xb5,
	0xb3, 0x0e, 0xb6, 0x14, 0xf2, 0xc4, 0x00, 0xe8, 0x0c, 0xfa, 0x73, 0x29, 0x55, 0x21, 0x92, 0xc8,
	0x54, 0xf8, 0x01, 0x0b, 0xa9, 0x69, 0xb9, 0x32, 0x93, 0xc6, 0x3d, 0x03, 0x8f, 0x14, 0x8a, 0x5c,
	0x38, 0x2e, 0x33, 0x0b, 0xf9, 0x60, 0xe4, 0x1f, 0x6d, 0xc8, 0x45, 0x0d, 0x3f, 0xc3, 0xa0, 0x5c,
	0xc3, 0x74, 0x25, 0xa9, 0x50, 0x63, 0x0d, 0x68, 0xf4, 0x96, 0x86, 0x76, 0x3b, 0xf7, 0xde, 0x86,
	0x71, 0xa1, 0x09, 0x38, 0x3f, 0x77, 0x38, 0xa0, 0x11, 0x49, 0x02, 0x1a, 0xe7, 0x53, 0xfe, 0x33,
	0x55, 0xcd, 0x2d, 0x59, 0xad, 0xb2, 0x65, 0xb5, 0xf2, 0xe8, 0xaa, 0xaa, 0xc4, 0x3b, 0x46, 0xb7,
	0xed, 0xbe, 0xda, 0x8e, 0xfb, 0x1c, 0x04, 0xfd, 0xad, 0x9c, 0xcb, 0x78, 0xe5, 0x8c, 0xa1, 0xeb,
	0x51, 0xc2, 0x83, 0x79, 0x21, 0xa1, 0x9c, 0xaa, 0x72, 0x77, 0xaa, 0x8d, 0xd2, 0x6a, 0x59, 0xa9,
	0xf3, 0x2d, 0xb4, 0x8b, 0x78, 0x2a, 0x3c, 0xfa, 0x04, 0x0e, 0x8d, 0x0b, 0x4d, 0xa8, 0xf6, 0xb0,
	0xe1, 0x66, 0xa9, 0x33, 0xd0, 0x79, 0x04, 0x27, 0x5e, 0x30, 0xa7, 0x61, 0x1a, 0xd3, 0xad, 0x36,
	0xac, 0x6f, 0x55, 0xf7, 0xdd, 0x3a, 0x01, 0xb4, 0x73, 0x4b, 0x17, 0xf2, 0x0b, 0xc0, 0x45, 0x1a,
	0xbc, 0xa1, 0xf2, 0x8a, 0x88, 0xb9, 0xee, 0xc4, 0xd4, 0xec, 0xfc, 0x37, 0x74, 0x95, 0xbf, 0x18,
	0x2b, 0x43, 0x5e, 0xd0, 0x95, 0x7e, 0xba, 0x73, 0x45, 0x33, 0xda, 0xeb, 0xd8, 0xac, 0x9d, 0x17,
	0xd0, 0xc9, 0x02, 0x98, 0xa0, 0xe2, 0x43, 0x21, 0xde, 0xaf, 0xf1, 0x57, 0xe8, 0x3f, 0x2f, 0x22,
	0x15, 0x55, 0x7d, 0x07, 0xed, 0x3c, 0xa0, 0xc9, 0x9d, 0x75, 0xa4, 0xed, 0x6e, 0x54, 0xe3, 0x3c,
	0xa1, 0x5e, 0x3b, 0x97, 0xd0, 0x2b, 0x45, 0xd0, 0xbd, 0x1c, 0x42, 0x37, 0xbf, 0x6f, 0x72, 0x88,
	0x3c, 0x42, 0xd7, 0x2d, 0xcb, 0xc6, 0x9d, 0x69, 0x69, 0xe7, 0x9c, 0xc2, 0x89, 0x8a, 0x72, 0x51,
	0xa8, 0x2e, 0xb4, 0x38, 0x0f, 0x01, 0xed, 0xe0, 0x3a, 0xc3, 0x6e, 0xc9, 0xb5, 0xad, 0x92, 0x9d,
	0xdf, 0xe0, 0x81, 0x47, 0x93, 0xb0, 0xf4, 0x5f, 0x5a, 0xd7, 0x76, 0x0e, 0x9d, 0xec, 0xff, 0xc4,
	0x0d, 0x9e, 0x4b, 0xeb, 0xb8, 0x25, 0x2e, 0x6e, 0x2f, 0x37, 0x1b, 0xe7, 0x01, 0xdc, 0xbf, 0x1d,
	0x4b, 0x69, 0xf8, 0xe6, 0x02, 0x5a, 0x85, 0xdd, 0x50, 0x13, 0x6a, 0x97, 0x63, 0xaf, 0x7f, 0x80,
	0x5a, 0x50, 0xbf, 0x9a, 0x4c, 0x6e, 0xfa, 0x15, 0x64, 0xc1, 0xa1, 0x5e, 0x79, 0xfd, 0xaa, 0x06,
	0x6f, 0xae, 0xc7, 0xcf, 0xfb, 0x35, 0xd4, 0x03, 0x98, 0xe0, 0x27, 0xa3, 0xa7, 0xf8, 0x8f, 0x57,
	0x93, 0xa7, 0xfd, 0xfa, 0xf0, 0xef, 0x0a, 0x58, 0x85, 0x45, 0x38, 0xfa, 0x11, 0xda, 0x25, 0xdb,
	0xa3, 0x63, 0xf7, 0xf6, 0xc3, 0x1b, 0x1c, 0xb9, 0xb7, 0x5e, 0xc6, 0x81, 0xfa, 0x77, 0x34, 0x32,
	0x2f, 0xa3, 0x9e, 0xbb, 0xf5, 0x48, 0x06, 0x1d, 0xb7, 0x64, 0x72, 0xc5, 0x7c, 0xac, 0x5e, 0x51,
	0xd9, 0x92, 0xe8, 0xbe, 0xbb, 0xcf, 0xd8, 0x83, 0x63, 0x77, 0x8f, 0x73, 0x0f, 0x86, 0xff, 0x54,
	0x00, 0x0c, 0x30, 0x22, 0xea, 0x18, 0xfd, 0x00, 0xd6, 0x7a, 0xf4, 0xe8, 0xc8, 0xdd, 0x35, 0xd2,
	0xe0, 0x9e, 0xbb, 0xed, 0x8c, 0x4c, 0xc0, 0xd6, 0x3c, 0x95, 0x80, 0x7d, 0x73, 0x57, 0x02, 0x6e,
	0x8f, 0x5d, 0x5d, 0x7f, 0x06, 0xfd, 0xdd, 0x69, 0x20, 0xdb, 0xbd, 0x63, 0xd8, 0x83, 0x53, 0x77,
	0xef, 0xe8, 0x9c, 0x83, 0x69, 0xc3, 0xfc, 0x1f, 0x1e, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x02,
	0x71, 0x34, 0x2d, 0x5a, 0x08, 0x00, 0x00,
}
