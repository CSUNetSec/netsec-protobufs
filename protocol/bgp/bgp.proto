syntax = "proto3";

import "github.com/CSUNetSec/netsec-protobufs/common/common.proto";

package bgp;

message MrtMessage {
  // maximal field value = 2

  MrtHeader header = 1;
  MrtBody body = 2;
}

message MrtHeader {
  // maximal field value = 4

  uint32 timestamp = 1;
  uint32 type = 2;
  uint32 subtype = 3;
  uint32 len = 4;
}

message MrtBody {
  // maximal field value = 3

  BGP4MPHeader BGP4MPHeader = 1;
  bytes BGPMessage = 2;
  RIB rib = 3;
}

message RIB {
  // maximal field value = 2

  repeated PeerEntry peerEntry = 1;
  repeated RIBEntry routeEntry = 2;
}

message PeerEntry {
  //maximal field value = 3 

  common.IPAddressWrapper peer_IP = 1;
  uint32 peer_AS = 2;
  uint32 peer_id = 3;
}

message RIBEntry {
  //maximal field value = 4 

  common.PrefixWrapper prefix = 1;
  uint32 timestamp = 2;
  uint32 peer_index = 3;
  BGPUpdate.Attributes attrs = 4;
}

message BGP4MPHeader {
  // maximal field value = 7

  uint32 peer_AS = 1;
  uint32 local_AS = 2;
  uint32 interface_index = 3;
  uint32 address_family = 4;
  common.IPAddressWrapper peer_IP = 5;
  common.IPAddressWrapper local_IP = 6;
  bool is_AS4 = 7;
}

message BGPHeader {
  // maximal field value = 3

  // 16 bytes marker
  bytes marker = 1;
  // 2 byte length of BGP msg RFC says should be less than 4096
  uint32 length = 2;
  // uint8 msg type
  uint32 type = 3;
}

message BGPUpdate {
  // maximal field value = 3

  // an AS-path is a sequence of either subsequences of AS-Paths (lists)
  // or Sets of ASes. We call either of those, segments.
  message ASPathSegment {
    // maximal field value = 2 

    repeated uint32 AS_set = 1;
    repeated uint32 AS_seq = 2;
  }
 
  // if this is populated then all the attrs in it are RFC-mandatory,
  // so required.
  message AdvertisedRoutes {
    // maximal field value = 1 

    repeated common.PrefixWrapper prefixes = 1;
  }

  message Aggregator {
    // maximal field value = 2 

    uint32 AS = 1;
    common.IPAddressWrapper IP = 2;
  }

  message Community {
    // maximal field value = 2

    // XXX we don't parse deeper into these attribute yet.
    // but we can store it for now.
    bytes community = 1;
    bytes extended_community = 2;
  }

  message Communities {
    // maximal field value = 1

    repeated Community communities = 1;
  }

  message Attributes {
    //maximal field value = 13 
    //https://www.iana.org/assignments/bgp-parameters/bgp-parameters.xhtml#bgp-parameters-2
    //non deprecated as of 01/2018
    enum Type {
      UNKNOWN = 0;
      ORIGIN = 1;
      AS_PATH = 2;
      NEXT_HOP = 3;
      MULTI_EXIT = 4;
      LOCAL_PREF = 5;
      ATOMIC_AGGREGATE = 6;
      AGGREGATOR = 7;
      COMMUNITY = 8;
      ORIGINATOR_ID = 9;
      CLUSTER_LIST = 10;
      MP_REACH_NLRI = 14;
      MP_UNREACH_NLRI = 15;
      EXTENDED_COMMUNITY = 16;
      AS4_PATH = 17;
      AS4_AGGREGATOR = 18;
      PMSI_TUNNEL = 22;
      TUNNEL_ENCAPSULATION_ATTRIBUTE = 23;
      TRAFFIC_ENGINEERING = 24;
      IPV6_ADDRESS_SPECIFIC_EXTENDED_COMMUNITY = 25;
      AIGP = 26;
      PE_DISTINGUISHER_LABELS = 27;
      BGP_LS_ATTRIBUTE = 29;
      LARGE_COMMUNITY = 32;
      BGPSEC_PATH = 33;
      ATTR_SET = 128;
    }
 
    bool optional_bit = 1;
    bool transitive_bit = 2;
    bool partial_bit = 3;
    bool extended_bit = 4;
    enum Origin {
      IGP = 0;
      EGP = 1;
      INC = 2;
    }
    Origin origin = 5;
    repeated ASPathSegment AS_path = 6;
    common.IPAddressWrapper next_hop = 7;
    uint32 multi_exit = 8;
    uint32 local_pref = 9;
    Aggregator aggregator = 10;
    Communities communities = 11;
    bool atomic_aggregate = 12;
    repeated Type types = 13;
  }

  message WithdrawnRoutes {
    // maximal field value = 1

    repeated common.PrefixWrapper prefixes = 1;
  }

  // a message can contain only Advertised routes,
  // only withdrawn or both.
  AdvertisedRoutes advertised_routes = 1;
  WithdrawnRoutes withdrawn_routes = 2;
  Attributes attrs = 3;
}
