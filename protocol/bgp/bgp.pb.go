// Code generated by protoc-gen-go.
// source: github.com/CSUNetSec/netsec-protobufs/protocol/bgp/bgp.proto
// DO NOT EDIT!

/*
Package bgp is a generated protocol buffer package.

It is generated from these files:
	github.com/CSUNetSec/netsec-protobufs/protocol/bgp/bgp.proto

It has these top-level messages:
	MrtMessage
	MrtHeader
	MrtBody
	BGP4MPHeader
	BGPHeader
	BGPUpdate
*/
package bgp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/CSUNetSec/netsec-protobufs/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BGPUpdate_Attributes_Origin int32

const (
	BGPUpdate_Attributes_IGP BGPUpdate_Attributes_Origin = 0
	BGPUpdate_Attributes_EGP BGPUpdate_Attributes_Origin = 1
	BGPUpdate_Attributes_INC BGPUpdate_Attributes_Origin = 2
)

var BGPUpdate_Attributes_Origin_name = map[int32]string{
	0: "IGP",
	1: "EGP",
	2: "INC",
}
var BGPUpdate_Attributes_Origin_value = map[string]int32{
	"IGP": 0,
	"EGP": 1,
	"INC": 2,
}

func (x BGPUpdate_Attributes_Origin) String() string {
	return proto.EnumName(BGPUpdate_Attributes_Origin_name, int32(x))
}
func (BGPUpdate_Attributes_Origin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 5, 0}
}

type MrtMessage struct {
	Header *MrtHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Body   *MrtBody   `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *MrtMessage) Reset()                    { *m = MrtMessage{} }
func (m *MrtMessage) String() string            { return proto.CompactTextString(m) }
func (*MrtMessage) ProtoMessage()               {}
func (*MrtMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MrtMessage) GetHeader() *MrtHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MrtMessage) GetBody() *MrtBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type MrtHeader struct {
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Type      uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Subtype   uint32 `protobuf:"varint,3,opt,name=subtype" json:"subtype,omitempty"`
	Len       uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (m *MrtHeader) Reset()                    { *m = MrtHeader{} }
func (m *MrtHeader) String() string            { return proto.CompactTextString(m) }
func (*MrtHeader) ProtoMessage()               {}
func (*MrtHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MrtBody struct {
	BGP4MPHeader *BGP4MPHeader `protobuf:"bytes,1,opt,name=BGP4MPHeader" json:"BGP4MPHeader,omitempty"`
	BGPMessage   []byte        `protobuf:"bytes,2,opt,name=BGPMessage,proto3" json:"BGPMessage,omitempty"`
}

func (m *MrtBody) Reset()                    { *m = MrtBody{} }
func (m *MrtBody) String() string            { return proto.CompactTextString(m) }
func (*MrtBody) ProtoMessage()               {}
func (*MrtBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MrtBody) GetBGP4MPHeader() *BGP4MPHeader {
	if m != nil {
		return m.BGP4MPHeader
	}
	return nil
}

type BGP4MPHeader struct {
	PeerAs         uint32                   `protobuf:"varint,1,opt,name=peer_as,json=peerAs" json:"peer_as,omitempty"`
	LocalAs        uint32                   `protobuf:"varint,2,opt,name=local_as,json=localAs" json:"local_as,omitempty"`
	InterfaceIndex uint32                   `protobuf:"varint,3,opt,name=interface_index,json=interfaceIndex" json:"interface_index,omitempty"`
	AddressFamily  uint32                   `protobuf:"varint,4,opt,name=address_family,json=addressFamily" json:"address_family,omitempty"`
	PeerIp         *common.IPAddressWrapper `protobuf:"bytes,5,opt,name=peer_ip,json=peerIp" json:"peer_ip,omitempty"`
	LocalIp        *common.IPAddressWrapper `protobuf:"bytes,6,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	IsAs4          bool                     `protobuf:"varint,7,opt,name=is_as4,json=isAs4" json:"is_as4,omitempty"`
}

func (m *BGP4MPHeader) Reset()                    { *m = BGP4MPHeader{} }
func (m *BGP4MPHeader) String() string            { return proto.CompactTextString(m) }
func (*BGP4MPHeader) ProtoMessage()               {}
func (*BGP4MPHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BGP4MPHeader) GetPeerIp() *common.IPAddressWrapper {
	if m != nil {
		return m.PeerIp
	}
	return nil
}

func (m *BGP4MPHeader) GetLocalIp() *common.IPAddressWrapper {
	if m != nil {
		return m.LocalIp
	}
	return nil
}

type BGPHeader struct {
	// 16 bytes marker
	Marker []byte `protobuf:"bytes,1,opt,name=marker,proto3" json:"marker,omitempty"`
	// 2 byte length of BGP msg RFC says should be less than 4096
	Length uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	// uint8 msg type
	Type uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *BGPHeader) Reset()                    { *m = BGPHeader{} }
func (m *BGPHeader) String() string            { return proto.CompactTextString(m) }
func (*BGPHeader) ProtoMessage()               {}
func (*BGPHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type BGPUpdate struct {
	// a message can contain only Advertized routes,
	// only withdrawn or both.
	AdvertizedRoutes *BGPUpdate_AdvertizedRoutes `protobuf:"bytes,1,opt,name=advertized_routes,json=advertizedRoutes" json:"advertized_routes,omitempty"`
	WithdrawnRoutes  *BGPUpdate_WithdrawnRoutes  `protobuf:"bytes,2,opt,name=withdrawn_routes,json=withdrawnRoutes" json:"withdrawn_routes,omitempty"`
	Attrs            *BGPUpdate_Attributes       `protobuf:"bytes,3,opt,name=attrs" json:"attrs,omitempty"`
}

func (m *BGPUpdate) Reset()                    { *m = BGPUpdate{} }
func (m *BGPUpdate) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate) ProtoMessage()               {}
func (*BGPUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BGPUpdate) GetAdvertizedRoutes() *BGPUpdate_AdvertizedRoutes {
	if m != nil {
		return m.AdvertizedRoutes
	}
	return nil
}

func (m *BGPUpdate) GetWithdrawnRoutes() *BGPUpdate_WithdrawnRoutes {
	if m != nil {
		return m.WithdrawnRoutes
	}
	return nil
}

func (m *BGPUpdate) GetAttrs() *BGPUpdate_Attributes {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// an AS-path is a sequence of either subsequences of AS-Paths (lists)
// or Sets of ASes. We call either of those, segments.
type BGPUpdate_ASPathSegment struct {
	AsSet []uint32 `protobuf:"varint,1,rep,packed,name=as_set,json=asSet" json:"as_set,omitempty"`
	AsSeq []uint32 `protobuf:"varint,2,rep,packed,name=as_seq,json=asSeq" json:"as_seq,omitempty"`
}

func (m *BGPUpdate_ASPathSegment) Reset()                    { *m = BGPUpdate_ASPathSegment{} }
func (m *BGPUpdate_ASPathSegment) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate_ASPathSegment) ProtoMessage()               {}
func (*BGPUpdate_ASPathSegment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

// if this is populated then all the attrs in it are RFC-mandatory,
// so required.
type BGPUpdate_AdvertizedRoutes struct {
	Prefixes []*common.PrefixWrapper `protobuf:"bytes,1,rep,name=prefixes" json:"prefixes,omitempty"`
}

func (m *BGPUpdate_AdvertizedRoutes) Reset()                    { *m = BGPUpdate_AdvertizedRoutes{} }
func (m *BGPUpdate_AdvertizedRoutes) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate_AdvertizedRoutes) ProtoMessage()               {}
func (*BGPUpdate_AdvertizedRoutes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 1} }

func (m *BGPUpdate_AdvertizedRoutes) GetPrefixes() []*common.PrefixWrapper {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

type BGPUpdate_Aggregator struct {
	As uint32                   `protobuf:"varint,1,opt,name=as" json:"as,omitempty"`
	Ip *common.IPAddressWrapper `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (m *BGPUpdate_Aggregator) Reset()                    { *m = BGPUpdate_Aggregator{} }
func (m *BGPUpdate_Aggregator) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate_Aggregator) ProtoMessage()               {}
func (*BGPUpdate_Aggregator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 2} }

func (m *BGPUpdate_Aggregator) GetIp() *common.IPAddressWrapper {
	if m != nil {
		return m.Ip
	}
	return nil
}

type BGPUpdate_Community struct {
	// XXX we don't parse deeper into these attribute yet.
	// but we can store it for now.
	Community         []byte `protobuf:"bytes,1,opt,name=community,proto3" json:"community,omitempty"`
	ExtendedCommunity []byte `protobuf:"bytes,2,opt,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
}

func (m *BGPUpdate_Community) Reset()                    { *m = BGPUpdate_Community{} }
func (m *BGPUpdate_Community) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate_Community) ProtoMessage()               {}
func (*BGPUpdate_Community) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 3} }

type BGPUpdate_Communities struct {
	Communities []*BGPUpdate_Community `protobuf:"bytes,1,rep,name=communities" json:"communities,omitempty"`
}

func (m *BGPUpdate_Communities) Reset()                    { *m = BGPUpdate_Communities{} }
func (m *BGPUpdate_Communities) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate_Communities) ProtoMessage()               {}
func (*BGPUpdate_Communities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 4} }

func (m *BGPUpdate_Communities) GetCommunities() []*BGPUpdate_Community {
	if m != nil {
		return m.Communities
	}
	return nil
}

type BGPUpdate_Attributes struct {
	OptionalBit     bool                        `protobuf:"varint,1,opt,name=optional_bit,json=optionalBit" json:"optional_bit,omitempty"`
	TransitiveBit   bool                        `protobuf:"varint,2,opt,name=transitive_bit,json=transitiveBit" json:"transitive_bit,omitempty"`
	PartialBit      bool                        `protobuf:"varint,3,opt,name=partial_bit,json=partialBit" json:"partial_bit,omitempty"`
	ExtendedBit     bool                        `protobuf:"varint,4,opt,name=extended_bit,json=extendedBit" json:"extended_bit,omitempty"`
	Origin          BGPUpdate_Attributes_Origin `protobuf:"varint,5,opt,name=origin,enum=bgp.BGPUpdate_Attributes_Origin" json:"origin,omitempty"`
	AsPath          []*BGPUpdate_ASPathSegment  `protobuf:"bytes,6,rep,name=as_path,json=asPath" json:"as_path,omitempty"`
	NextHop         *common.IPAddressWrapper    `protobuf:"bytes,7,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	MultiExit       uint32                      `protobuf:"varint,8,opt,name=multi_exit,json=multiExit" json:"multi_exit,omitempty"`
	LocalPref       uint32                      `protobuf:"varint,9,opt,name=local_pref,json=localPref" json:"local_pref,omitempty"`
	Aggregator      *BGPUpdate_Aggregator       `protobuf:"bytes,10,opt,name=aggregator" json:"aggregator,omitempty"`
	Communities     *BGPUpdate_Communities      `protobuf:"bytes,11,opt,name=communities" json:"communities,omitempty"`
	AtomicAggregate bool                        `protobuf:"varint,12,opt,name=atomic_aggregate,json=atomicAggregate" json:"atomic_aggregate,omitempty"`
}

func (m *BGPUpdate_Attributes) Reset()                    { *m = BGPUpdate_Attributes{} }
func (m *BGPUpdate_Attributes) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate_Attributes) ProtoMessage()               {}
func (*BGPUpdate_Attributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 5} }

func (m *BGPUpdate_Attributes) GetAsPath() []*BGPUpdate_ASPathSegment {
	if m != nil {
		return m.AsPath
	}
	return nil
}

func (m *BGPUpdate_Attributes) GetNextHop() *common.IPAddressWrapper {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *BGPUpdate_Attributes) GetAggregator() *BGPUpdate_Aggregator {
	if m != nil {
		return m.Aggregator
	}
	return nil
}

func (m *BGPUpdate_Attributes) GetCommunities() *BGPUpdate_Communities {
	if m != nil {
		return m.Communities
	}
	return nil
}

type BGPUpdate_WithdrawnRoutes struct {
	Prefixes []*common.PrefixWrapper `protobuf:"bytes,1,rep,name=prefixes" json:"prefixes,omitempty"`
}

func (m *BGPUpdate_WithdrawnRoutes) Reset()                    { *m = BGPUpdate_WithdrawnRoutes{} }
func (m *BGPUpdate_WithdrawnRoutes) String() string            { return proto.CompactTextString(m) }
func (*BGPUpdate_WithdrawnRoutes) ProtoMessage()               {}
func (*BGPUpdate_WithdrawnRoutes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 6} }

func (m *BGPUpdate_WithdrawnRoutes) GetPrefixes() []*common.PrefixWrapper {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func init() {
	proto.RegisterType((*MrtMessage)(nil), "bgp.MrtMessage")
	proto.RegisterType((*MrtHeader)(nil), "bgp.MrtHeader")
	proto.RegisterType((*MrtBody)(nil), "bgp.MrtBody")
	proto.RegisterType((*BGP4MPHeader)(nil), "bgp.BGP4MPHeader")
	proto.RegisterType((*BGPHeader)(nil), "bgp.BGPHeader")
	proto.RegisterType((*BGPUpdate)(nil), "bgp.BGPUpdate")
	proto.RegisterType((*BGPUpdate_ASPathSegment)(nil), "bgp.BGPUpdate.ASPathSegment")
	proto.RegisterType((*BGPUpdate_AdvertizedRoutes)(nil), "bgp.BGPUpdate.AdvertizedRoutes")
	proto.RegisterType((*BGPUpdate_Aggregator)(nil), "bgp.BGPUpdate.Aggregator")
	proto.RegisterType((*BGPUpdate_Community)(nil), "bgp.BGPUpdate.Community")
	proto.RegisterType((*BGPUpdate_Communities)(nil), "bgp.BGPUpdate.Communities")
	proto.RegisterType((*BGPUpdate_Attributes)(nil), "bgp.BGPUpdate.Attributes")
	proto.RegisterType((*BGPUpdate_WithdrawnRoutes)(nil), "bgp.BGPUpdate.WithdrawnRoutes")
	proto.RegisterEnum("bgp.BGPUpdate_Attributes_Origin", BGPUpdate_Attributes_Origin_name, BGPUpdate_Attributes_Origin_value)
}

func init() {
	proto.RegisterFile("github.com/CSUNetSec/netsec-protobufs/protocol/bgp/bgp.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 925 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0x26, 0xb6, 0xe3, 0x97, 0xf1, 0x4b, 0x9c, 0x95, 0x0a, 0xd7, 0x53, 0x69, 0x83, 0x11, 0x50,
	0x3e, 0xd4, 0x16, 0x69, 0x90, 0x28, 0x2a, 0x1f, 0x9c, 0x90, 0x36, 0x96, 0x48, 0x6b, 0x9d, 0x55,
	0xca, 0xb7, 0x63, 0x7d, 0xb7, 0x39, 0xaf, 0xf0, 0xbd, 0xf4, 0x6e, 0xdd, 0x24, 0xfc, 0x0b, 0x7e,
	0x15, 0x7f, 0x81, 0x9f, 0xc3, 0xec, 0xdc, 0xde, 0xf9, 0x45, 0x94, 0x20, 0x3e, 0x44, 0xd9, 0x7d,
	0xe6, 0x99, 0xd9, 0x99, 0x79, 0x66, 0xce, 0xf0, 0x3c, 0x90, 0x6a, 0xb1, 0x9a, 0x0f, 0xbd, 0x38,
	0x1c, 0x9d, 0xcd, 0xde, 0xbc, 0x12, 0x6a, 0x26, 0xbc, 0x51, 0x24, 0x54, 0x26, 0xbc, 0x27, 0x49,
	0x1a, 0xab, 0x78, 0xbe, 0xba, 0xca, 0x46, 0x74, 0xf2, 0xe2, 0xe5, 0x68, 0x1e, 0x24, 0xfa, 0x6f,
	0x48, 0x00, 0xab, 0xe2, 0xd1, 0x7e, 0xf6, 0xdf, 0x42, 0xa0, 0x39, 0x8c, 0x23, 0xf3, 0x2f, 0xf7,
	0x1f, 0xfc, 0x0c, 0x70, 0x99, 0xaa, 0x4b, 0x91, 0x65, 0x3c, 0x10, 0xec, 0x4b, 0xa8, 0x2f, 0x04,
	0xf7, 0x45, 0x6a, 0xed, 0x1d, 0xed, 0x3d, 0x6e, 0x1f, 0xf7, 0x86, 0xfa, 0x25, 0x24, 0x5c, 0x10,
	0xea, 0x18, 0x2b, 0x3b, 0x82, 0xda, 0x3c, 0xf6, 0x6f, 0xad, 0x0a, 0xb1, 0x3a, 0x05, 0xeb, 0x14,
	0x31, 0x87, 0x2c, 0x03, 0x09, 0xad, 0xd2, 0x8d, 0x3d, 0x80, 0x96, 0x92, 0xa1, 0xc8, 0x14, 0x0f,
	0x13, 0x8a, 0xdc, 0x75, 0xd6, 0x00, 0x63, 0x50, 0x53, 0xb7, 0x89, 0xa0, 0x60, 0x5d, 0x87, 0xce,
	0xcc, 0x82, 0x46, 0xb6, 0x9a, 0x13, 0x5c, 0x25, 0xb8, 0xb8, 0xb2, 0x3e, 0x54, 0x97, 0x22, 0xb2,
	0x6a, 0x84, 0xea, 0xe3, 0xe0, 0x57, 0x68, 0x98, 0xb7, 0xd9, 0xb7, 0xd0, 0x39, 0x7d, 0x39, 0x3d,
	0xb9, 0x9c, 0x5e, 0x6c, 0x56, 0x71, 0x48, 0xf9, 0x6d, 0x1a, 0x9c, 0x2d, 0x1a, 0x7b, 0x08, 0x80,
	0x77, 0xd3, 0x04, 0xca, 0xa3, 0xe3, 0x6c, 0x20, 0x83, 0x3f, 0x2a, 0xdb, 0x71, 0xd9, 0x27, 0xd0,
	0x48, 0x84, 0x48, 0x5d, 0x9e, 0x99, 0x72, 0xea, 0xfa, 0x3a, 0xce, 0xd8, 0x7d, 0x68, 0x2e, 0x63,
	0x8f, 0x2f, 0xb5, 0x25, 0xaf, 0xa7, 0x41, 0x77, 0x34, 0x7d, 0x05, 0x07, 0x32, 0x52, 0x22, 0xbd,
	0xe2, 0x9e, 0x70, 0x65, 0xe4, 0x8b, 0x1b, 0x53, 0x5a, 0xaf, 0x84, 0x27, 0x1a, 0x65, 0x5f, 0x40,
	0x8f, 0xfb, 0x7e, 0x8a, 0x6f, 0xbb, 0x57, 0x3c, 0x94, 0xcb, 0x5b, 0x53, 0x6c, 0xd7, 0xa0, 0x2f,
	0x08, 0x64, 0xdf, 0x98, 0x1c, 0x64, 0x62, 0xed, 0x53, 0x99, 0xd6, 0xd0, 0x28, 0x3b, 0x99, 0x8e,
	0x73, 0xe6, 0xdb, 0x94, 0x27, 0x89, 0x96, 0x4d, 0x13, 0x27, 0x09, 0x7b, 0x5a, 0x64, 0x87, 0x3e,
	0xf5, 0x3b, 0x7c, 0xf2, 0xbc, 0xd1, 0xe9, 0x1e, 0xd4, 0x65, 0x86, 0xf5, 0x9c, 0x58, 0x0d, 0x74,
	0x69, 0x3a, 0xfb, 0x32, 0x1b, 0x67, 0x27, 0x83, 0xd7, 0xd0, 0xc2, 0x96, 0x98, 0x7e, 0x7c, 0x0c,
	0xf5, 0x90, 0xa7, 0xbf, 0x99, 0x8e, 0x77, 0x1c, 0x73, 0xd3, 0x38, 0x2a, 0x14, 0xa8, 0x85, 0x69,
	0x86, 0xb9, 0x95, 0x92, 0x57, 0xd7, 0x92, 0x0f, 0xfe, 0x6a, 0x51, 0xc4, 0x37, 0x89, 0xcf, 0x95,
	0x60, 0x3f, 0xc1, 0x21, 0xf7, 0xdf, 0x8b, 0x54, 0xc9, 0xdf, 0x85, 0xef, 0xa6, 0xf1, 0x4a, 0x89,
	0xcc, 0xc8, 0xf9, 0xa8, 0x90, 0x33, 0xa7, 0x0e, 0xc7, 0x25, 0xcf, 0x21, 0x9a, 0xd3, 0xe7, 0x3b,
	0x08, 0x9b, 0x40, 0xff, 0x1a, 0x57, 0xc4, 0x4f, 0xf9, 0x75, 0x54, 0x04, 0xcb, 0x67, 0xf7, 0xe1,
	0x4e, 0xb0, 0xb7, 0x05, 0xcd, 0xc4, 0x3a, 0xb8, 0xde, 0x06, 0xd8, 0x08, 0xf6, 0xb9, 0x52, 0x69,
	0x46, 0xb9, 0xb7, 0x8f, 0xef, 0xef, 0x26, 0x83, 0x36, 0x39, 0x27, 0xd7, 0x9c, 0x67, 0xff, 0x00,
	0xdd, 0xf1, 0x6c, 0xca, 0xd5, 0x62, 0x26, 0x82, 0x50, 0x44, 0x4a, 0x37, 0x94, 0x67, 0x6e, 0x26,
	0x14, 0xd6, 0x53, 0xc5, 0xf2, 0xf7, 0x79, 0x36, 0x13, 0x6b, 0xf8, 0x1d, 0x66, 0x56, 0xc2, 0xef,
	0xec, 0x73, 0xe8, 0xef, 0x16, 0x88, 0xd2, 0x37, 0x93, 0x54, 0x5c, 0xc9, 0x1b, 0xea, 0x49, 0x15,
	0xd3, 0xb8, 0x57, 0xe8, 0x38, 0x25, 0xbc, 0x10, 0xb1, 0xa4, 0xd9, 0x2f, 0x00, 0xc6, 0x41, 0x90,
	0x8a, 0x80, 0xab, 0x38, 0x65, 0x3d, 0xa8, 0x94, 0xa3, 0x8b, 0x27, 0xf6, 0x18, 0x2a, 0x38, 0x12,
	0x95, 0x3b, 0x46, 0x02, 0x39, 0xf6, 0x2f, 0xd0, 0x3a, 0x43, 0xf3, 0x2a, 0x92, 0xea, 0x56, 0xef,
	0xb5, 0x57, 0x5c, 0x8c, 0xf2, 0x6b, 0x80, 0x3d, 0x01, 0x26, 0x6e, 0x94, 0xc0, 0x99, 0xf6, 0xdd,
	0x35, 0x2d, 0xdf, 0xae, 0xc3, 0xc2, 0x52, 0x06, 0xb3, 0x27, 0xd0, 0x2e, 0x2e, 0x12, 0x6b, 0xfc,
	0x1e, 0xda, 0xde, 0xfa, 0x6a, 0xca, 0xb4, 0x76, 0xba, 0x5d, 0x7a, 0x3b, 0x9b, 0x64, 0xfb, 0xcf,
	0x1a, 0x56, 0x5b, 0x0a, 0xc1, 0x3e, 0x83, 0x4e, 0x9c, 0x28, 0x19, 0x47, 0x38, 0xf9, 0x73, 0xa9,
	0x28, 0xd3, 0xa6, 0xd3, 0x2e, 0xb0, 0x53, 0xa9, 0xf4, 0xce, 0xa9, 0x94, 0x47, 0x19, 0xfa, 0xbf,
	0x17, 0x44, 0xaa, 0x10, 0xa9, 0xbb, 0x46, 0x35, 0xed, 0x11, 0xb4, 0x13, 0x8e, 0x52, 0x98, 0x40,
	0x55, 0xe2, 0x80, 0x81, 0x34, 0x01, 0x9f, 0x2a, 0x6b, 0xd6, 0x8c, 0x5a, 0xfe, 0x54, 0x81, 0x69,
	0xca, 0x77, 0x50, 0x8f, 0x53, 0x19, 0xc8, 0x88, 0xd6, 0xb6, 0x77, 0x7c, 0xf4, 0xc1, 0x09, 0x1a,
	0xbe, 0x26, 0x9e, 0x63, 0xf8, 0xf8, 0x75, 0x6b, 0xe0, 0x84, 0x24, 0x38, 0x4a, 0xb8, 0xbd, 0xba,
	0x1d, 0x0f, 0x76, 0x5d, 0x37, 0xe7, 0xcc, 0xc1, 0x71, 0xd2, 0x57, 0xbd, 0xf5, 0x11, 0x26, 0xe0,
	0x2e, 0xe2, 0x84, 0x56, 0xf8, 0x5f, 0xb7, 0x5e, 0x33, 0x2f, 0xe2, 0x84, 0x7d, 0x0a, 0x10, 0xae,
	0x96, 0x4a, 0xba, 0xe2, 0x06, 0xcb, 0x68, 0xe6, 0xdf, 0x6c, 0x42, 0xce, 0x11, 0xd0, 0xe6, 0xfc,
	0x4b, 0xa2, 0x07, 0xcc, 0x6a, 0xe5, 0x66, 0x42, 0xf4, 0x00, 0xb2, 0x67, 0x00, 0xbc, 0x9c, 0x36,
	0x0b, 0xfe, 0x79, 0x53, 0x4a, 0x82, 0xb3, 0x41, 0x66, 0xcf, 0xb7, 0x75, 0x6f, 0x93, 0xaf, 0xfd,
	0x01, 0xdd, 0x91, 0xb1, 0xa5, 0x3c, 0xfb, 0x1a, 0xfa, 0x18, 0x25, 0x94, 0x9e, 0x5b, 0x84, 0x14,
	0x56, 0x87, 0x34, 0x38, 0xc8, 0xf1, 0xe2, 0x55, 0x31, 0xf8, 0x1c, 0xea, 0x79, 0x7f, 0x59, 0x03,
	0xaa, 0x93, 0x97, 0xd3, 0xfe, 0x47, 0xfa, 0x70, 0x8e, 0x87, 0x3d, 0x42, 0x5e, 0x9d, 0xf5, 0x2b,
	0xf6, 0x8f, 0x70, 0xb0, 0xf3, 0x45, 0xf8, 0x1f, 0xcb, 0x37, 0xaf, 0xd3, 0x6f, 0xed, 0xd3, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x2d, 0x10, 0xce, 0xeb, 0x07, 0x00, 0x00,
}
