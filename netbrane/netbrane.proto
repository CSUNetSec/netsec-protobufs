syntax = "proto3";
package netbrane;
// This file contains code as is or derived from NoFutz networks Inc.
// This code was delivered to Colorado State University as part of
// the netbrane project and holds a compatible BSD license with the
// one that is included at the toplevel of this project.
// The author of that code and the POC for NoFutz Networks is
// John Reumann: reumann@nofutznetworks.com

import "github.com/CSUNetSec/netsec-protobufs/common/common.proto";
import "github.com/CSUNetSec/netsec-protobufs/protocol/bgp/bgp.proto";
import "github.com/CSUNetSec/netsec-protobufs/proddle/proddle.proto";

//
// ---------- Capture and Logging 
//

//
// Protocol buffer to capture the output of flow records that
// are spit out from a tool like Argus, Netflow. 
//
// The idea is as follows.
//
// 1. There are many monitoring stations in the network. Each one of those
//    is a source of flow data. We describe each of those data source using
//    a CaptureSpec.
//
// 2. The monitoring stations capture information about traffic flows, e.g.
//    the source-ip, destination-ip, tcp source and destination ports,
//    timestamp of the record and so on. Each such flow is recorded in
//    a FlowRecord data item.
//
// 3. The records are stored inside one fat file of sequential records.
//    The records are either of type CaptureSpec or of type FlowRecord. The
//    container is called a FlowRecordUnion.
//
// 4. Each FlowRecord references the CaptureSpec that is responsible for its
//    capture. 
//
// 5. Each CaptureSpec should be defined before it's used but the application
//    should not break if that is not the case. The information about the
//    data source is useful in debugging but shouldn't be part of the anoamly
//    detection. Only the identity of the capture node should matter.

// We don't always capture packet data. If we do, this is
// the format
message PacketData {
  uint64 nanos_since_flow_start = 1;
  uint32 packet_size = 2;
  
  // IP per packet see RFC 791
  uint32 ip_id = 3;

  // either more fragments after this or offset != 0  
  bool is_fragment = 4;

  // TCP related follows RFC 793
  // This is the window advertisement
  // in bytes. 
  int32 window_size = 5;
  uint32 sequence = 6;
  uint32 ack = 7;   
  bool syn = 8;
  bool fin = 9;
  bool reset = 10;

  // Do we need more understanding of options ip and otherwise
  bool options_l3 = 11;
  bool options_l4 = 12;
}

// Flow originates at address
message IPFlow {
  // Maximal tag value is 21

  // really required
  common.IPAddressWrapper address = 1;

  // we may aggregate flows for an entire subnet if we
  // get too fine-grained with individual flow records.
  common.IPAddressWrapper mask = 2;

  int32 port = 3;
  int32 tos = 4;
  int32 ttl = 5;
  int64 bytes = 6;

  // Some sniffers may be able to parse the number of acutal payload bytes
  int64 application_bytes = 7;
  int64 packets = 8;
  float loss = 9;

  // ---------- ICMP ----------
  int32 type = 10;
  int32 code = 11;
  int32 id = 12;

  int64 retransmissions = 13;

  // The vlan_id of the packet, empty if no vlan header.
  int32 vlan_id = 14;

  // The L2 source addresses on which we observed this flow
  repeated bytes source_mac = 15;

  // The L2 destination addresses that were affixed to this flow
  repeated bytes destination_mac = 16;

  // The physical port id(s) on which we received/sent this flow.
  repeated int32 physical_port_number = 17;

  // ---------- Tunneling ----------

  // If the intercepted packet is a gre packet, place the key here.
  uint32 gre_key = 18;

  // If we are looking at a tunneled protocol store the inner flow information
  // here. Note, this is typically the really interesting address.
  common.IPAddressWrapper inner_address = 19;
  common.IPAddressWrapper inner_port = 20;

  // as in IPPROTO_*
  common.IPAddressWrapper inner_protocol = 21;

  // ---------- Additional data ----------

  // We may get richer flow information, e.g., decorated with pcap info.
  // We store additional information on a per-packet basis in the
  // sequence of pcap_decoration(s) below
  // Timestamps in these are relative to the timestamp of the record.
  // Decoration is most meaningful if the flow describes something
  // like a single connection. But this is not a requirement. If we
  // get netflow records we don't get the pcap information.
  repeated PacketData packet_decor = 22;
}

message FlowRecord {
  // Maximal tag value is 11.

  // which capture was responsible for this record.
  int32 capture_spec_id = 1;

  // seconds since epoch : deprecated use top-level instead
  int64 timestamp_seconds = 2;

  // really required
  uint32 timestamp_ns = 3;

  // if duration is not set then the flow-record is incomplete, i.e.,
  // the flow was started but hasn't terminated. If the record is
  // an aggregate count of many individual records then we set
  // bucket_duration_us instead of this value.
  // The field is also unset if this is a single packet.
  int64 duration_us = 4;

  enum L2Proto {
    L2_NONE = 0;
    L2_ETHERNET = 1;
  }
  L2Proto l2_proto = 5;
  // L3 protocol is recorded as ETHERTYPE
  int32 l3_proto = 6;
  int32 l4_proto = 7;

  IPFlow source = 8;
  IPFlow destination = 9;
  
  // The number of individual flow records that have
  // been rolled up into this entry.
  int64 number_of_aggregated_flows = 10;

  // If we roll up many individual flows into one single bucket
  // then we need to state the duration of our bucket.
  int64 bucket_duration_us = 11;
}

message DNSRecord {
  common.IPAddressWrapper requesting_host = 1;
  common.IPAddressWrapper dns_server = 2;

  // The replies
  repeated common.IPAddressWrapper ips = 3;
  repeated string cname = 4;

  // The original question
  string query = 5;

  // Is the reply in DNSSec form
  bool dnssec = 6;
}

// Should contain either a capture_spec or a record. This gives us
// the ability to parse consecutive records flexibly. The record contains
// only one of the fields, namely the one identified by record_type.
// A capture spec is a meta-record meant to describe the file at hand.
message CaptureRecordUnion {	   
  // Rough timestamp for indexing or filtering of data. May be
  // augmented internally.  In UTC since epoch.
  int64 timestamp_seconds = 1;

  enum RecordType {
    CAPTURE_SPEC = 0;
    FLOW_RECORD = 1;
    BGP_UPDATE_RECORD = 2;
    DNS_RECORD = 3;
    PROBE_RECORD = 4;
    PROBE_RESULT_RECORD = 5;
  }

  RecordType record_type = 2;
  common.CaptureSpec capture_spec = 3;
  FlowRecord flow_record = 4;
  bgp.BGPUpdate bgp_update_record = 5;
  DNSRecord dns_record = 6;
  proddle.Probe probe_record = 7;
  proddle.ProbeResult probe_result_record = 8;
}
